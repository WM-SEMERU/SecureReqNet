proposal: the standard library should be decoupled from the runtime


At the moment, the Go standard library is strongly coupled with the particular compiler in use. This is problematic for other compilers that would like to use a different runtime. For example:

The reflect package is bundled with the standard library, while the specific RTTI format may differ between compilers. Other compilers will have to override this package to implement their own.
The time package calls runtime.nanotime directly, runtime.nanotime is not exported by the runtime, of course, but the time package calls it with some //go:linkname magic. This is not a public nor stable API. Compilers that use a different runtime will need to keep track of such changes and play catch-up every Go release. It would be much more useful if there was a more-or-less stable interface that is at least well documented.
A compiler must use one of the supported GOOS/GOARCH combinations in build tags, otherwise the standard library will fail to compile. For example, if you use GOOS=none or GOARCH=avr for bare-metal targets, many standard library packages will fail to compile.
Go uses a special assembly syntax only supported by gc. The rest of the world uses standard assembly formats leading to friction (see c2goasm, for example). This problem comes up in a few places, for example many functions in the math package are implemented in assembly, even though they might just call fallback functions written in Go. A new Go compiler would either have to parse this custom assembly format with uncommon calling convention, or provide the necessary symbols that call through to the fallback functions.

This close coupling is painful for Go compilers that try to do something unconventional. For example:

TinyGo compiles Go code for bare metal microcontrollers. Because the standard library doesn't support it, it pretends to be linux/arm for all baremetal targets which is not optimal but ~works. TinyGo also overrides a select list of standard library packages (reflect, runtime, os but not os/user). This feels like a hack. (Note: I'm the original author of TinyGo).
GopherJS had to resort to hacks to get the standard library to compile by supplementing and overriding some symbols on the AST level.

I would like to propose to somehow separate the standard library from the compiler and runtime implementation. For example, the platform- and compiler-independent bits of the standard library could be shipped as a new Go module while packages that are closely related to the compiler/runtime could be bundled with the compiler. This may not only be useful for other compilers, but also for more invasive changes to the standard library in the future.
This is not a new proposal. @ianlancetaylor has proposed something like this before and I support this, although I might disagree with the exact list of core packages in this proposal.
