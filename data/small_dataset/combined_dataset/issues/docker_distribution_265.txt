Registry <-> web communication proactive security


People are going to communicate with their registry using webapps frontend / javascript (#39 is about enabling CORS to ease that) - as they will want to build nice hub-like UIs.
Also (although less likely) it might be possible for users to host random content on a registry, either by abusing it, or in the future, by extending it.
The bottom-line of this is that I would like us to take a defensive approach by default, and cram in additional headers into the registry so that we avoid (down the road) some class of web-based attacks on registries.
This one we should definitely consider:

Strict-Transport-Security: max-age=16070400; includeSubDomains help avoid TLS downgrading attacks - probably useful in all cases

These we might consider as well (by decreasing order of interest):

X-Content-Type-Options: nosniff - prevents IE from magically sniffing the content-type from the content (and force it to honor explicit content-type headers), thus protecting it from possibly rendering rogue content.
X-Frame-Options: deny - prevent embedding a registry url as an (i)frame in another page (would force a download / force rendering)
Content-Security-Policy: default-src "self" - if it is possible to host html on the registry, that would prevent third-party javascript, inline javascript, DOM-binded actions, and eval (http://content-security-policy.com/)
X-XSS-Protection: 0 - if it's possible to host html on the registry, that would disable IE "XSS protection" which is more trouble than help (https://www.limessecurity.com/ie8xss/Abusing_IE8s_XSS_Filters.pdf)

