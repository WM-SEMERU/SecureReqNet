[Security] Argon2i Password Encoder





Q
A




Branch?
master


Bug fix?
no


New feature?
yes


BC breaks?
no


Deprecations?
no


Tests pass?
yes


Fixed tickets



License
MIT


Doc PR
WIP



Since the libsodium RFC passed with flying colours, I'd like to kick start a discussion about adding Argon2i as a password encoder to the security component. The initial code proposal in this PR supports both the upcoming public API confirmed for PHP 7.2, and the libsodium PECL extension for those below 7.2 (available for PHP 5.4+).
Concerns

Should the test cover hash length? At the moment the result of Argon2i is 96 characters, but because the hashing parameters are included in the result ($argon2i$v=19$m=32768,t=4,p=1$...) this is not guaranteed.
I've used one password encoder class because the result should be the same whether running natively in 7.2 or from the PECL extension, but should the logic be split out into separate private methods (like Argon2iPasswordEncoder::encodePassword()) or not (like in Argon2iPasswordEncoder::isPasswordValid())? Since I can't really find anything concrete on Symfony choosing one way over another I'm assuming it's down to personal preference?

The Future
Whilst the libsodium RFC has been approved and the public API confirmed, there has been no confirmation of Argon2i becoming an official algorithm for passhword_hash(). If that is confirmed, then the implementation should absolutely use the native password_* functions since the sodium_* functions do not have an equivalent to the password_needs_rehash() function.
Any feedback would be greatly appreciated ðŸ˜ƒ
