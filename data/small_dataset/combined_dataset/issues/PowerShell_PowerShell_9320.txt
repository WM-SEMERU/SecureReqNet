Get-Date and .AddSeconds() inconsistent with UTC-local time conversion


This issue is copied from MicrosoftDocs/PowerShell-Docs#4127.
Originally submitted by @rwlangeveld.

Issue Details
Converting from UTC to local time with DST (being CEST in my case) seems to give unexpected results.
I ran into this issue while converting Unix (epoch) time to a PowerShell/.Net datetime object. I take
00:00:00 AM, January 1, 1970 (UTC) as a starting point, and add the given Unix time (in seconds) to it. Then I want to translate that to the correct local time.
In winter, this works fine in multiple ways. In summer, using DST, this seems not to give me the expected results in most ways. Only one way, I got this to work. Which at least seems to be very inconsistent...
Examples
NB. I translated the day- and month names in the examples from Dutch to English manually.
I start with specifying the begin date as '01-01-1970 00:00:00Z', with 'Z' denoting this as being UTC.
When adding only one second, and converting to local time, all seems find.
Since January 1 is in the winter, no DST is involved in local time (CET = UTC+1). UTC does not have DST.
PS H:> (Get-Date '01-01-1970 00:00:00Z').AddSeconds(1).TolocalTime()
Thursdag 1 January 1970 01:00:01
PS H:> (Get-Date '01-01-1970 00:00:00Z').TolocalTime().AddSeconds(1)
Thursdag 1 January 1970 01:00:01
When not specifying UTC. The time region is unspecified, therefore should be assumed to be UTC, when translating to local time, I expect. This seems to be true:
PS H:> (Get-Date '01-01-1970 00:00:00').AddSeconds(1).TolocalTime()
Thursdag 1 January 1970 01:00:01
PS H:> (Get-Date '01-01-1970 00:00:00').TolocalTime().AddSeconds(1)
Thursdag 1 January 1970 01:00:01
When adding enough seconds to enter DST in local time (CEST = UTC+2), however, things get a little unexpected...
I add exactly 181 days (181d * 24h/d * 60m/h * 60s/m = 15638400 seconds).
In UTC I expect to be at midnight again. But since this new date is in the summer, in local time, I expect to be 2 hours later.. (Since local time is CEST now, being CET+DST, being UTC+2.)
PS H:> (Get-Date '01-01-1970 00:00:00Z').AddSeconds(15638400).TolocalTime()
Wednesday 1 July 1970 01:00:00
Seems to be a bug to me...! Converting UTC to CEST here, should be +2 hours!
PS H:> (Get-Date '01-01-1970 00:00:00Z').TolocalTime().AddSeconds(15638400)
Wednesday 1 July 1970 01:00:00
Seems to be a bug to me...! Converting UTC to CET here, should be +1 hour. However, adding enough time to enter CEST (CET+DST) this should have been corrected by +1 hour...
PS H:> (Get-Date '01-01-1970 00:00:00').AddSeconds(15638400).TolocalTime()
Wednesday 1 July 1970 02:00:00
CORRECT!
PS H:> (Get-Date '01-01-1970 00:00:00').TolocalTime().AddSeconds(15638400)
Wednesday 1 July 1970 01:00:00
Wrong again...
This seems to be a bug in the (lack of) implementation of DST conversion in time calculations to me.
Any help, feedback or bugfix would be appreciated.
Thank you in advance.
Rogier Langeveld
Version(s) of document impacted

[?] Impacts 6.next document
[?] Impacts 6 document
 Impacts 5.1 document
[?] Impacts 5.0 document
[?] Impacts 4.0 document
[?] Impacts 3.0 document

Reason(s) for not selecting all version of documents

 The documented feature was introduced in selected version of PowerShell
 This issue only shows up in selected version of the document

