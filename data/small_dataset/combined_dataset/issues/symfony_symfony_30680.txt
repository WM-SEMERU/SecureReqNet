[Serializer] [DoctrineBridge] Better support for (de-)normalization of Doctrine Entities


Description
When it comes to (de-)normalization of Doctrine Entities (= Objects) with the standard Symfony Serializer (basically ObjectNormalizer) people seem to face issues that an object that has been normalized isn't ending up in the same object when denormalized again.
Example
When an Doctrine Entity Object MyObject with the attributes id (int), name (string) and relationship (ManyToOneAssoc, targetEntity MyOtherObject) normalizes (and encodes in JSON like) :
{id: 1, name: 'text', relationship: {id: 3}}
Feature Request 1: When MyOtherObject is lazy loaded, don't normalize/encode the Proxy attributes ('initializer', 'cloner', 'isInitialized').
My current workaround is to extend the ObjectNormalizer and add these attributes to the 'ignored_attributes' array for all Proxy instances.
When the JSON encoded example gets denormalized again, I naivly expect Dotrine Entities of MyObject and MyOtherObject, but a new instance of the MyOtherObject entity is created, while it already exists in the Database.
Feature Request 2: When an existing Doctrine Entity is denormalized, identify it by its known ClassMetadata identifier field(s) and get it from EntityManager instead of creating a new instance.
Current workaround for me is to implement NormalizerInterface for Doctrine entities.
Of course this shouldn't be part of the standard Serializer component, but could be part of the Doctrine Bridge to my understanding where we already have Doctrine specifics in terms of PropertyExtractors like DoctrineExtractor and others.
