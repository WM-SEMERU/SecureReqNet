Update all dependencies


This PR contains the following updates:



Package
Type
Update
Change
References




@​babel/core
devDependencies
minor
^7.3.4 -> ^7.4.0
homepage, source


@​babel/polyfill
devDependencies
minor
^7.2.5 -> ^7.4.0
homepage, source


@​babel/preset-env
devDependencies
minor
^7.3.4 -> ^7.4.2
homepage, source


@​storybook/cli
devDependencies
patch
^5.0.3 -> ^5.0.5
source


@​storybook/react
devDependencies
patch
^5.0.3 -> ^5.0.5
source


@​types/ramda
devDependencies
patch
^0.26.3 -> ^0.26.5
source


@​types/react-dom
devDependencies
patch
^16.8.2 -> ^16.8.3
source


react
devDependencies
patch
16.8.4 -> 16.8.5
homepage, source


react-dom
devDependencies
patch
16.8.4 -> 16.8.5
homepage, source


typescript
devDependencies
patch
^3.3.3333 -> ^3.3.4000
homepage, source




Release Notes

babel/babel
v7.4.0
Compare Source
👓 Spec Compliance

babel-parser

#​9529 Add readonly to TypeScript type modifier (@​tanhauhau)
#​9534 TypeScript Constant contexts (@​tanhauhau)
#​9637 Update identifier parsing per Unicode v12 (@​mathiasbynens)
#​9616 Allow any reserved word in export {} from specifiers (@​danez)
#​9612 [TS] Disallow type casts in arrow parameters (@​nicolo-ribaudo)
#​9607 Refactor parsing object members (@​danez)
#​9599 Disallow duplicate params in methods (@​danez)
#​9586 Treat for loop body as part of loop scope (@​danez)


babel-parser, babel-plugin-transform-typescript

#​9641 Allow context type annotation on getters/setters (@​matt-tingen)


babel-plugin-proposal-unicode-property-regex, babel-plugin-transform-dotall-regex, babel-plugin-transform-unicode-regex

#​9636 Update babel-plugin-proposal-unicode-property-regex for Unicode v12 (@​mathiasbynens)


babel-generator, babel-parser, babel-plugin-transform-flow-strip-types, babel-plugin-transform-modules-systemjs

#​9589 Check exported bindings are defined (@​danez)


babel-generator, babel-parser, babel-plugin-transform-classes, babel-plugin-transform-flow-comments, babel-plugin-transform-flow-strip-types, babel-plugin-transform-new-target

#​9493 Introduce scope tracking in the parser (@​danez)



🚀 New Feature

babel-helpers, babel-plugin-proposal-class-properties, babel-plugin-proposal-decorators, babel-plugin-proposal-object-rest-spread, babel-plugin-transform-runtime, babel-plugin-transform-typescript, babel-polyfill, babel-preset-env, babel-register, babel-runtime-corejs2, babel-runtime-corejs3

#​7646 Update to core-js@3 (@​zloirock)


babel-template

#​9648 Add %%placeholders%% support to @​babel/template (@​nicolo-ribaudo)


babel-parser, babel-plugin-proposal-partial-application

#​9474 Partial application plugin (@​byara)


babel-generator, babel-helper-create-class-features-plugin, babel-helpers, babel-plugin-proposal-private-methods

#​9446 Private Static Class Methods (Stage 3) (@​tim-mc)


babel-generator, babel-types

#​9542 Add placeholders support to @​babel/types and @​babel/generator (@​nicolo-ribaudo)


babel-parser

#​9364 Add parser support for placeholders (@​nicolo-ribaudo)


babel-generator, babel-parser, babel-plugin-syntax-partial-application, babel-types

#​9343 Partial Application Syntax: Stage 1 (@​byara)



🐛 Bug Fix

babel-helper-create-class-features-plugin, babel-helper-replace-supers, babel-plugin-proposal-private-methods

#​9704 Fix super Method Calls in Class Private Methods (@​tim-mc)


babel-parser

#​9699 Correctly parse TS TypeAssertions around arrow functions (@​danez)
#​9600 Fix scope check for 2nd+ lexical bindings (@​danez)
#​9593 [TS] Correctly forget awaits after parsing async arrows with type args (@​nicolo-ribaudo)
#​9585 Fix strict mode prescanning with EmptyStatement (@​danez)


babel-core, babel-plugin-transform-for-of

#​9697 Correctly preserve reference to array in for-of loop (@​danez)


babel-plugin-transform-typescript

#​9693 [plugin-transform-typescript] Fix transpiling of TS abstract classes with decorators  (@​agoldis)


babel-traverse, babel-types

#​9692 Fix TSFunctionType visitors definition (@​penielse)


babel-plugin-proposal-object-rest-spread

#​9628 [proposal-object-rest-spread] fix templateLiteral in extractNormalizedKeys  (@​pnowak)


babel-plugin-transform-modules-systemjs

#​9639 System modules - Hoist classes like other variables (@​guybedford)


babel-generator, babel-parser

#​9618 Disallow escape sequences in contextual keywords (@​danez)


babel-helper-split-export-declaration, babel-plugin-transform-modules-commonjs, babel-traverse

#​9613 Don't add params of anonymous exported function decls to the outer scope (@​nicolo-ribaudo)


babel-plugin-transform-parameters, babel-plugin-transform-typescript, babel-types

#​9605 [plugin-transform-typescript] Strip type imports used in Enums and object types (@​echenley)


babel-helper-call-delegate, babel-plugin-transform-parameters

#​9601 Don't loose "this" in helper-call-delegate (@​nicolo-ribaudo)


babel-plugin-proposal-object-rest-spread, babel-plugin-transform-modules-commonjs, babel-traverse, babel-types

#​9492 Mark FOO in "var { x: FOO }˝ as a binding, not as a reference (@​nicolo-ribaudo)


babel-preset-env

#​9595 preset-env: Sort versions before determining lowest (@​jridgewell)


babel-helper-define-map, babel-helper-hoist-variables, babel-parser, babel-plugin-proposal-object-rest-spread, babel-plugin-transform-block-scoping, babel-plugin-transform-destructuring, babel-plugin-transform-modules-systemjs, babel-traverse, babel-types

#​9518 Use for..of Object.keys instead of for..in (@​nicolo-ribaudo)



💅 Polish

babel-parser

#​9646 Remove input and length from state (@​danez)
#​9645 Reorganize token types and use a map for them (@​danez)
#​9591 Remove always false param allowExpressionBody (@​danez)


babel-standalone, babel-types

#​9025 Make babel-standalone an ESModule and enable flow (@​danez)


babel-generator

#​9579 change var name for coherence (@​tanohzana)



🏠 Internal

Other

#​9588 Publish to npm using a GitHub action (@​nicolo-ribaudo)
#​9640 Switch from rollup-stream to rollup (@​danez)
#​9647 Add WarningsToErrorsPlugin to webpack to avoid missing build problems on CI (@​danez)
#​9624 Update dependencies (@​danez)
#​9623 Add editorconfig for Makefile (@​danez)
#​9587 Update test262 (@​danez)
#​9582 Minify bundles on circle for repl (@​danez)


babel-register

#​9678 Remove dependency on home-or-tmp package (@​AmirS)





storybooks/storybook
v5.0.5
Compare Source
Bump version number (same as 5.0.4, but need to make this latest again!)
v5.0.4
Compare Source
Bug Fixes

UI: Fix tooltip event bindings, logger import (#​6238)
CLI: Fix stories regexp in config.js (#​6180)
Accessibilty: Add missing button titles (#​6124)
React: Fix forked CRA support on Windows (#​6236)
Addon-knkobs: Fix color type button z-index (#​6203)
Angular: Fix typo in demo example  (#​6193)
Addon-Info: Restore fonts and color styling (#​6186)
Addon-knobs: Fix ObjectType knob react warning (#​6159)
Core: Add core-js as a dep to client-api (#​6209)
React: Fix logging in cra-config (#​6245)



zloirock/core-js
v3.0.0
Compare Source

Features

Add new features:

Object.fromEntries (ECMAScript 2019)
Symbol#description (ECMAScript 2019)
New Set methods (stage 2 proposal)

Set#difference
Set#intersection
Set#isDisjointFrom
Set#isSubsetOf
Set#isSupersetOf
Set#symmetricDifference
Set#union


Promise.allSettled (stage 2 proposal)
Getting last item from Array (stage 1 proposal)

Array#lastItem
Array#lastIndex


String#replaceAll (stage 1 proposal)
String#codePoints (stage 1 proposal)
New collections methods (stage 1 proposal)

Map.groupBy
Map.keyBy
Map#deleteAll
Map#every
Map#filter
Map#find
Map#findKey
Map#includes
Map#keyOf
Map#mapKeys
Map#mapValues
Map#merge
Map#reduce
Map#some
Map#update
Set#addAll
Set#deleteAll
Set#every
Set#filter
Set#find
Set#join
Set#map
Set#reduce
Set#some
WeakMap#deleteAll
WeakSet#addAll
WeakSet#deleteAll


compositeKey and compositeSymbol methods (stage 1 proposal)
Number.fromString (stage 1 proposal)
Math.seededPRNG (stage 1 proposal)
Symbol.patternMatch (for stage 1 pattern matching proposal)
Symbol.dispose (for stage 1 using statement proposal)
Promise.any (with AggregateError) (stage 0 proposal)
URL and URLSearchParam from URL standard, also stage 0 proposal to ECMAScript

URL

URL#href
URL#origin
URL#protocol
URL#username
URL#password
URL#host
URL#hostname
URL#port
URL#pathname
URL#search
URL#searchParams
URL#hash
URL#toString
URL#toJSON


URLSearchParams

URLSearchParams#append
URLSearchParams#delete
URLSearchParams#get
URLSearchParams#getAll
URLSearchParams#has
URLSearchParams#set
URLSearchParams#sort
URLSearchParams#toString
URLSearchParams#keys
URLSearchParams#values
URLSearchParams#entries
URLSearchParams#@&#8203;@&#8203;iterator




.forEach method on iterable DOM collections (#​329)


Improve existing features:

Add triggering unhandled Promise rejection events (instead of only global handlers), #​205.
Wrap fetch for correct with polyfilled Promise and preventing problems like #​178, #​332, #​371.
Add support of @@&#8203;isConcatSpreadable to Array#concat.
Add support of @@&#8203;species to Array#{concat, filter, map, slice, splice}.
Add direct .exec calling to RegExp#{@&#8203;@&#8203;replace, @&#8203;@&#8203;split, @&#8203;@&#8203;match, @&#8203;@&#8203;search}. Also, added fixes for RegExp#exec method. #​411, #​434, #​453, thanks @​nicolo-ribaudo.
Correct iterators prototypes chain, related #​261.
Correct Typed Arrays prototypes chain, related #​378.
Make the internal state of polyfilled features completely unobservable, #​146.
Add validation of receiver's internal class to missed non-generic methods.
Fix descriptors of global properties.
In the version without global pollution, if Object#toString does not support @@&#8203;toStringTag, add to wrapped prototypes own toString method with @@&#8203;toStringTag logic, see #​199.


Update standard features and proposals:

asap (old stage 0 proposal) replaced by queueMicrotask (a part of HTML spec)
Update Observable (#​257, #​276, etc.)
Update Array#flatten -> Array#flat and Array#flatMap
Update global stage 3 proposal - rename global to globalThis
Update String#matchAll (proposal-string-matchall#​17, proposal-string-matchall#​38, proposal-string-matchall#​41, etc.) and move to the stage 3
Update .name properties of String#{trimStart, trimEnd , trimLeft, trimRight}, move to the stage 3
Remove mongolian vowel separator (U+180E) from the list of whitespaces for methods like String#trim (ES6 -> ES7)


Mark ES2016, ES2017, ES2018, ES2019 features as stable:

Array#{ flat, flatMap }
{ Array, %TypedArray% }#includes
Object.{ values, entries}
Object.getOwnPropertyDescriptors
String#{ padStart, padEnd }
String#{ trimStart, trimEnd, trimLeft, trimRight }
Promise#finally
Symbol.asyncIterator
Object#__(define|lookup)[GS]etter__


Remove obsolete features:

Error.isError (withdrawn)
System.global and global (replaced by globalThis)
Map#toJSON and Set#toJSON (rejected)
RegExp.escape (rejected)
Reflect.enumerate (removed from the spec)
Unnecessary iteration methods from CSSRuleList, MediaList, StyleSheetList


No more non-standard features, finally removed:

Dict
Object.{classof, isObject, define, make}
Function#part
Number#@&#8203;@&#8203;iterator
String#{escapeHTML, unescapeHTML}
delay


Add .sham flag to features which can't be properly polyfilled and / or not recommended for usage:

Symbol constructor - we can't add new primitives. Object.prototype accessors too expensive.
Object.{create, defineProperty, defineProperties, getOwnPropertyDescriptor, getOwnPropertyDescriptos}, Reflect.{defineProperty, getOwnPropertyDescriptor} can't be properly polyfilled without descriptors support.
Object.{freeze, seal, preventExtensions}, Reflect.preventExtensions can't be properly polyfilled in ES3 environment.
Object.getPrototypeOf can be deceived in ES3 environment.
Reflect.construct can't be polyfilled for a correct work with newTarget argument on built-ins.
Typed Array constructors polyfill is quite correct but too expensive.
URL constructor in engines without descriptors support.




Bug and compatibility fixes:

Fix deoptimisation of iterators in V8, #​377.
Fix import of property before constructor which should contain this property, #​262.
Fix some cases of IE11 WeakMap frozen keys fallback, #​384.
Fix non-enumerable integer keys issue because of Nashorn ~ JDK8 bug, #​389.
Fix Safari 12.0 Array#reverse bug.
One more fix for microtasks in iOS related #​339.
Added a fallback for Rhino bug, #​440.
Many other internal fixes and improvements.


Repository:

Change core-js repository structure to monorepo with packages in /packages/ directory.
Clean-up it, remove all possible duplicates, generated files, etc.


Packages:

Extract a version without global namespace pollution to a separate core-js-pure package (replacement for core-js/library).
Leave only one pair of bundles (global, with all polyfills) and move it to core-js-bundle package.
Remove bundling logic from core-js package, leave it only in core-js-builder package.
Clean-up packages.
Because of all approaches, reduce size of packages from ~2mb for core-js@2 to:

~500kb for core-js package
~440kb for core-js-pure package


Finally remove bower.json


CommonJS API, namespaces:

Add availability configuration of aggressiveness.
Move core-js/library to separate core-js-pure package.
Because of removing all non-standard features, we no longer need core-js/shim entry point, replace it just with core-js.
Move all features from ES5, ES2015, ES2016, ES2017, ES2018 and ES2019 to one namespace for stable ES - it's available as core-js/es, all those features in modules folder has es. prefix.
Change prefix for ES proposals from es7. to esnext., they no longer available in core-js/es7, use core-js/stage/* instead of that.
Rename core-js(/library)/fn to core-js(-pure)/features for improve readability.
Allow more granular inclusion of features from /es/ path (for example, core-js/es/array/from).
Add /stable/ entry points as an equal of /features/ for stable features, without proposals.
Add /proposals/ entry points for allow include all features from one proposal (for example, core-js/proposals/reflect-metadata).
Add /es|stable|features/instance/ entry points for getting polyfill of the related method for passed instance (could be used in cases like babel-runtime).
Split typed arrays polyfills. Now you can, for example, load only required method (for example, core-js/es/typed-array/from).
Extract well-known symbols definition from es.symbol module for loading only required features, for example, in MS Edge.
Rename web.dom namespace to web.dom-collections.
Rename es6.regexp.{match, replace, search, split} -> es.string.{match, replace, search, split} - mainly it's fixes / adding support of well-known symbols to string methods, only in second place adding related methods to regexp prototype.
Relax /modules/ directory by moving internal modules to /internals/ directory.
Remove deprecated array entry points: core-js(/library)/fn/array/{pop, push, reverse, shift, unshift}.
core object no longer available in the global version, entry points which previously returned it now returns globalThis object. Also, don't set global core property.
Add some missing entry points.


Tools, tests, code quality:

Added core-js-compat package with:

Data about the necessity of core-js modules and API for getting a list of required core-js modules by browserslist query, #​466.
Data which modules load by each entry point (mainly useful for tools like @babel/preset-env).
Data which modules added in minor versions (mainly useful for tools like @babel/preset-env).


core-js-builder package:

Added targets option with browserslist query.
Removed an option for generation bundle of a version without global namespace pollution - now it's an odd use case.
Removed UMD wrapper from a generated code of bundles - we don't need it for a global polyfill.


Getting rid of LiveScript, usage another language in JS standard library looks strange and impedes usage of tools like ESLint:

Tests are rewritten to JS.
Scripts are rewritten to JS.


Babel with minimalistic config (which should work anywhere) used on tests.
ESLint used on tests and tools.
Source code refactored for improving readability.





facebook/react
v16.8.5
Compare Source
React DOM

Don't set the first option as selected in select tag with size attribute. (@​kulek1 in #​14242)
Improve the useEffect(async () => ...) warning message. (@​gaearon in #​15118)
Improve the error message sometimes caused by duplicate React. (@​jaredpalmer in #​15139)

React DOM Server

Improve the useLayoutEffect warning message when server rendering. (@​gaearon in #​15158)

React Shallow Renderer

Fix setState in shallow renderer to work with Hooks. (@​gaearon in #​15120)
Fix shallow renderer to support React.memo. (@​aweary in #​14816)
Fix shallow renderer to support Hooks inside forwardRef. (@​eps1lon in #​15100)



Microsoft/TypeScript
v3.3.4000
Compare Source
This fix is identical to release 3.3.3333, but omits a non-essential artifact that was previously published to npm which impacted builds using Jenkins.


Renovate configuration
📅 Schedule: "before 2am" (UTC).
🚦 Automerge: Disabled by config. Please merge this manually once you are satisfied.
♻️ Rebasing: Whenever PR becomes conflicted, or if you modify the PR title to begin with "rebase!".
👻 Immortal: This PR will be recreated if closed unmerged. Get config help if that's undesired.


 If you want to rebase/retry this PR, check this box


This PR has been generated by Renovate Bot. View repository job log here.
