Evaluate use of MBEDTLS_THREADING_C & MBEDTLS_THREADING_PTHREAD flags


Enclaves currently support multithreaded use, but Open Enclave currently builds mbedtls without the
MBEDTLS_THREADING_C option. This issue tracks completing that investigation and applying any necessary fixes.


 Minimally, we will need to remove the TODO comment related to this workitem in the config.h file.


 Evaluate if we need to enable the MBEDTLS_THREADING_C option. Per config.h comment:


/**
 * \def MBEDTLS_THREADING_C
 *
 * Enable the threading abstraction layer.
 * By default mbed TLS assumes it is used in a non-threaded environment or that
 * contexts are not shared between threads. If you do intend to use contexts
 * between threads, you will need to enable this layer to prevent race
 * conditions. See also our Knowledge Base article about threading:
 * https://tls.mbed.org/kb/development/thread-safety-and-multi-threading
 *
 * Module:  library/threading.c
 *
 * This allows different threading implementations (self-implemented or
 * provided).
 *
 * You will have to enable either MBEDTLS_THREADING_ALT or
 * MBEDTLS_THREADING_PTHREAD.
 *
 * Enable this layer to allow use of mutexes within mbed TLS
 */
The mentioned flags are referenced in:

3rdparty\mbedtls\mbedtls\library\threading.c (threading library implementation)
3rdparty\mbedtls\mbedtls\library\version_features.c (utility function for enumerating enabled config)
3rdparty\mbedtls\mbedtls\programs\ssl\ssl_pthread_server.c (not used by Open Enclave)

The threading library implementations reference pthread_mutex_* functions which creates an explicit dependency on the wrapper oelibc functions if enabled.

 When MBEDTLS_THREAD_C and MBEDTLS_THREADING_PTHREAD options were previously enabled and run under tests/mbed, they causes a swath a test failures related to pthread handling; these issue should have been addressed in #264, and these tests need to be rerun to confirm if enabling these flags creates any issues.

