create usable principal values for wrapper origin checks


@jdm: In order for Servo to create usable principal values that the JS engine can manipulate, we need a couple things:

a C++ type that derives from JSPrincipals
this would live in jsglue.cpp in rust-mozjs, and follow a similar pattern to ForwardingProxyHandler/WrapperProxyHandler
a Rust API for creating/destroying instances of this principal type
also provide function callbacks so Rust code can override C++ method behaviour (for stuff like the subsumes method)

Presumably the C++ type would store a void* that is actually a Box of some Rust value that contains some kind of origin value that Servo can interpret. This will allow implementing the subsumes operation as:

cast both JSPrincipals pointers to the derived C++ type
extract the void* values from both C++ objects
cast them to the native Rust type
perform a same-origin comparison

XOW WIP: https://github.com/avadacatavra/servo/blob/xow/components/script/dom/bindings/utils.rs#L409
