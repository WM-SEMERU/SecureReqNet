Authentication for client-side applications


Our new project https://github.com/mozilla/addons-code-manager is currently a pure client-side application (no server code at all). This application must talk to the AMO API and users should be mostly authenticated, so most (if not all) API calls have to be authenticated.
In addons-frontend, we use a "frontend auth" cookie that is HTTP only. This cookie is sent by the AMO API to the browser. The browser sends the cookie to the frontend server on every HTTP call. The frontend server is the only piece of frontend JS that is able to read this cookie. The cookie value (i.e. the auth token) is read and then transferred to the client JS code by serializing it (in the redux state). Having the token in our frontend code is important because the API requires an Authorization header only. The is no cookie-based authentication mechanism.
That works well in the context of addons-frontend (and likely other 3rd-party clients) but it does not work for addons-code-manager. It is possible to log in and get a "frontend auth" cookie in this project (I have a POC), but there is no way to read this cookie from the addons-code-manager JS code because the cookie is HTTP only. There is also no way to perform authenticated HTTP calls to the API because the API ignores it (during the authentication phase).
This issue is about discussing and finding a way to securely make authenticated API calls from addons-code-manager to the AMO API.
I personally believe we could implement a cookie-based authentication mechanism so that we don't need to have access to the cookie/token in addons-code-manager and we don't even need to store the token. This likely requires some extra protections against CSRF, but maybe we could use the same-site cookie policy now? How does that work with localhost for development though?
