retain blob segments when deleting temporary objects from Swift


We've been deploying the  registry with a Swift storage backend and, like some other folks, we ran into the "timeout expired while waiting for segments" problem (e.g. #1013, #2188). I'm aware of Swift's eventual consistency, but I had a hard time believing that containers in generally healthy cluster could lag for such a long time.
After reviewing Swift's logs I realized that in every case the missing segments were deleted by the registry itself immediately after it created them. Although swift.Move is invoked before this to place the blob into its final location, this is done with a copy and delete, because Swift has no move or rename operations.
Due to Swift's eventual consistency the object is occasionally still visible in its old location when the registry is recursively removing the temporary upload files. swift.Move handles DLOs by just copying the X-Object-Manifest header to the new object (otherwise it would have to download and reupload the segments!) which means there can be (and sometimes are) two different objects referring to the same segments, one of which is then deleted, segments and all, by swift.Delete, leaving the other object alone and segmentless, and the registry vainly waiting for them to appear, which they never will.
This PR addresses this by adding a "committing" parameter to .Delete and setting it  during blobwriter.Commit so that swift.Delete knows not to delete segments for any DLOs it sees.
I've been testing with a repository of 755 blobs and 135 tags, and with this change applied and multiple runs of pushing the whole lot into an empty registry, I've been unable to reproduce the problem, whereas previously a few layers would always fail to upload. I've also deleted all of my test client's docker images and confirmed that everything downloads again.
