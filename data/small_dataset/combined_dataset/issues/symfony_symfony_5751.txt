Chmodding to 0666 & ~umask() doesn't always respect ACL


In several places, Symfony creates a temporary file with tempnam(), renames it and chmods it to 0666 & ~umask() (this string can be grepped). But when the app/cache directory is created with chmod +a or setfacl as per the docs, the created file will be writable only by its creator. For example if the dir is setfacl'd to be writable by smith and www-data, files that www-data creates by this method will only be writable by www-data.
This isn't a problem in normal operation, because if smith tries to create the file by the same method, the rename() is allowed to overwrite the old version even if it can't write into the file. But it can cause issues if smith wants to edit the file manually with a text editor, etc. So this is low priority, but it should be fixed if possible.
To explain why the current method doesn't work, I need to explain how ACLs work in general. Sorry about the length.
Permissions of a newly created file:
Step 1: If the parent directory has a "default ACL" (essentially a template for new files inside it), use it as the new file's ACL. Otherwise, set the ACL to "everyone can do everything except stuff that's forbidden by the umask".
Step 2: Look at the "mode" argument of the function that's creating the file (open, creat, mkdir, ...) and when a bit is missing from the mode, also remove it from the ACL. (E.g. when mode is 0666, nobody will be able execute it.)
The mode's first octal digit is about the file owner, and the third digit is about "others" (everyone not matched by any ACL rule), but the second number is a bit special: it's not just for the file group, it's a mask that covers all rules except the "owner" rule and the "others" rule. So if you open("file", O_CREAT, 0644), it takes the default ACL, and it removes "x" from the "owner" rule and "wx" from all the other rules.
What this means for Symfony:
When Symfony does 0666 & ~umask(), this isn't quite right. That's because as you'll notice above, when a directory has default ACL, umask doesn't enter the equation at all. The OS just uses the default ACL. If you chmod a file to 0644 and the file's ACL contains u:www-data:rw-, it'll effectively be just r--.
Plus, this can actually give someone more privileges than they should have: If the default ACL says "others have no access", chmodding to 0666 & ~022 would allow "others" to read the file. (Perhaps this is a bigger problem than the above "text editor" example...)
PHP has no functions for manipulating ACLs, so I think the only way to fix this is by completely avoiding chmod. And that means avoiding tempnam and just creating the file directly. (Perhaps you could use tempnam to generate a random filename, then delete it, then recreate it with normal permissions, but that seems a little too hacky.) What might be an issue is that tempnam has some nice exclusivity guarantees - maybe losing them would be a bigger problem than what this is trying to solve (which is, admittedly, very low priority)? I don't know.
Uh, thanks for reading through all of this. Sorry that I don't have a better solution :-|
