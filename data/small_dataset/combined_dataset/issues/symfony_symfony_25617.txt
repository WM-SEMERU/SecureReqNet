[DX][Security] Added TokenStorage::getUser($userClass)





Q
A




Branch?
master


Bug fix?
no


New feature?
yes


BC breaks?
no


Deprecations?
no


Tests pass?
yes


Fixed tickets



License
MIT


Doc PR





This is a PR to get feedback on the feature not the code.
There a more thing to do so please don't comment on the code.

So why this feature?
Actually I'm facing an issue right now and I don't really know what is the best
solution.
Technically:

$token = $this->tokenStorage->getToken() could return null or a TokenInterface;
$user = $token->getUser() could return a UserInterface or a string or an object with __toString();
even if $user instanceOf UserInterface it can be so any implementation of UserInterface. For example App\Entity\User or App\Entity\Agent.

So calling somewhere $this->tokenStorage->getToken()->getUser()->getFoobar()
could lead to many fatal errors.
A first solution could be to over-protect the code, like it's done here: 


symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerTrait.php


        Lines 352 to 361
      in
      07766b3






  if (null === $token = $this->container->get('security.token_storage')->getToken()) { 



  return; 



         } 



  



  if (!is_object($user = $token->getUser())) { 



  // e.g. anonymous authentication 



  return; 



         } 



  



  return $user; 





And an extra if should be added to ensure the class of UserInterface.
So we should write:
public function doSomething()
{
    $user = $this->getUser();
    if (!$user) {
        return; // or exception...
    }

    dump($user->getFoobar());
}

private getUser()
{
    if (!$this->tokenStorage->getToken()) {
        return null;
    }

    $user = $token->getUser();

    if (!$user) {
        return null;
    }

    if (!$user instanceof User) {
        return null;
    }

    return $user;
}
But it's a bit boring... And it's even more boring if we really know that this
call can be called if and only if the user firewall has been used.  So we are
100% sure no fatal error could be thrown... But only for now. May be in a soon
future, someone will change the firewall. And BOOM.
So Basically, I don't know what is the best thing to do:
1/ Be really robust and write lot of code
2/ Be pragmatic
But, I would like to propose another solution... This PR ;)
WDYT?
