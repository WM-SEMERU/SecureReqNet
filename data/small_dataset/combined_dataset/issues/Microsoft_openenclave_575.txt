Added safemath library for checking integer overflows.


Added integer overflow checking functions for addition, subtraction and multiplication.  If overflowed occurred, then the functions return OE_INTEGER_OVERFLOW. Otherwise, the function returns OE_OK and writes the result operation to the output parameter.
They are in this format: oe_safe_[op]_[type] where op = [add | sub | mul] and type = [s | u][8 | 16 | 32 | 64] or sizet.
Examples:

int64_t + int64_t -> oe_safe_add_s64
uint32_t - uint32_t -> oe_safe_sub_u32
size_t * size_t -> oe_safe_mul_sizet

Example usage:
uint32_t a = 1;
uint32_t b = UINT32_MAX;
uint32_t c;

/* Overflow. Function returns OE_INTEGER_OVERFLOW and value at c is indeterminate. */
oe_result_t res = oe_safe_add_u32(a, b, &c);
assert(res == OE_INTEGER_OVERFLOW);

/* No overflow, so function returns OE_OK and c stores the operation result. */
res = oe_safe_sub_u32(b, a, &c);
assert(res == OE_OK);
assert(c == UINT32_MAX - 1);

The functions will use GCC/Clang`s integer overflow builtins if available. Otherwise, it will check for integer overflow using preconditions in C.
