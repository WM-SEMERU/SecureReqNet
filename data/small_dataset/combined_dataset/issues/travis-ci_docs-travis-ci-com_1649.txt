ssh-known-hosts seems to encourage poor security practices


The ssh-known-hosts configuration option documented in https://github.com/travis-ci/docs-travis-ci-com/blob/master/user/ssh-known-hosts.md seems to encourage poor security practices. It may make Travis builds susceptible to man-in-the-middle attacks.
If I understand the effect of the ssh-known-hosts option correctly, it makes a Travis build instance retrieve an SSH server's key afresh every time the build instance starts. This would more or less defeat the purpose of the SSH known hosts feature.
The point of SSH's known hosts feature is to pin down the cryptographic identity of a server so that a man in the middle attacker cannot impersonate the server. On a regular computer, the standard approach of simply accepting and storing the server key on the first connection and then checking it on every subsequent connection makes sense because the client remembers and checks the server key for a long time. On short lived systems, such as Travis build instances, this approach makes less sense because almost every connection is the 'first' connection and therefore the build instance accepts any key the server (or an impersonator) presents for every single build.
Yes, of course such attacks are extremely unlikely. Still, how about updating the documentation to help users to make an informed decision about this? Would it be worth mentioning that there is a security vs. convenience trade-off here?
For short lived systems, the safer option is to obtain the server key ahead of time and to add that fixed key to the .known_hosts file of the Travis build instance. Basically, one could run ssh-keyscan on a local computer against the SSH server or git repo server of interest, get the new entries for that server from the local .known_hosts file, and configure Travis to add those entries to the .known_hosts file of each Travis build instance. That would pin down the server's cryptographic identity as SSH normally intends it to be done. And there might be other, more convenient alternatives to achieve the same effect.
