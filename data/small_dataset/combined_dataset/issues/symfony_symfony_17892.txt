[Security, Profiler] Incomplete implementation of role hierarchies


Hi,
I am trying to build a bundle implementing custom role definitions including role hierarchies.
That works very well with registering a custom security.voter.
As the logic for this role hierarchy is provided by a custom security voter, it means the parameter in the security config is empty, i.e.
security:
    role_hierarchy: []

in app/config/security.yml.
So far, so good.
But there are two integration points into the rest of the framework that make issues with a custom role hierarchy.
To explain these two issues, let's use the following hierarchy:
ROLE_ADMIN
└── ROLE_USER

1. Profiler
On the security tab, the profiler displays the directly assigned roles, next to the inherited roles. The inherited roles are always empty.
2. Security Annotation / ExpressionVoter
The ExpressionVoter provides an array of roles for easy checking. This array of roles only uses the default RoleHierarchy as defined by Security Core.
This way you can have rather strange results:
/**
 * @Security("is_granted('ROLE_USER')")
 */
// works
whereas
/**
 * @Securty("'ROLE_USER' in roles")
 */
// Does not work
Cause
The cause is that the security bundle assumes that there is only one role hierarchy (which is fed directly from the security.role_hierarchy configuration value). This assumption is not correct, as each SecurityVoter (probably subclassing RoleHierarchyVoter) might have its own hierarchy.
Each of these "role hierarchy extension points" (like SecurityListener, SecurityDataCollector and maybe ExpressionVoter) currently use a direct RoleHierarchyInterface to call getReachableRoles.
This global role hierarchy (stored in security.role_hierarchy) needs to be mutable, so that custom role loaders can benefit from it, too (and we would get the integration with the annotation / expression voter and with the profiler for free).
Custom bundles that integration role hierarchies could then just append roles to the global role hierarchy. This would add a new public method in RoleHierarchy.
Another implementation would be to just add another tag which collects all role hierarchy providers, which are then queried for complete role hierarchies, instead of just the global one. This would mean an API change in some of the core classes.
Thoughts?
