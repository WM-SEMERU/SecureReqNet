Guard authentication always stores targetPath in session


Symfony version(s) affected: 4.2.2
Description
When a firewall is configured for guard authentication with stateless: false, when requesting a login-protected route that is not supports()-ed by the guard authenticator, the targetPath is saved in a session.
A session is therefore started every time a protected route is called.
The only way to stop this behavior is to either make the firewall stateless (and discard sessions altogether), or to set the header X-Requested-With=XMLHttpRequest but this is not documented, and the header is not a standard and is not set by default by the fetch API.
How to reproduce
# security.yml
# [...]

    firewalls:
        main:
            guard:
                authenticators: [App\Security\MyAuthenticator]
// src/Security/MyAuthenticator.php

class MyAuthenticator extends AbstractGuardAuthenticator
{
    supports(Request $request)
    {
         return false;
    }

    // ...

    start(Request $request, $authException = null)
    {
        return new Response('Invalid login', Response::HTTP_UNAUTHORIZED);
    }
}
If any route is called, a session containing a value on _security.main.target_path will be started, and a PHPSESSID cookie is set on the client.
Possible Solution
There could be a parameter session_target_path (or equivalent) in the guard config group, that would avoid this behavior.
Additional context
The session is set in ExceptionListener when handling the AuthenticationException generated by the absence of any guard authenticator that supports the request.
