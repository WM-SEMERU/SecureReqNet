Empty string role after login





Q
A




Bug report?
yes


Feature request?
no


BC Break report?
no


RFC?
no


Symfony version
3.2.3



To save my roles in the database I created
a Role entity, which includes the implementation of RoleInterface.
To get all things work I overwritten RoleHierarchy to build the role tree. But then after I log in with a user that has one role I get an empty string as role in File vendor\symfony\symfony\src\Symfony\Component\Security\Core\Role\RoleHierarchy.php on line 43

See all informations
Stacktrace

My RoleHierarchy
use Doctrine\ODM\MongoDB\DocumentManager;
use Symfony\Component\Security\Core\Role\RoleHierarchy as RoleHierarchyBase;

class RoleHierarchy extends RoleHierarchyBase
{
    /**
     * @var DocumentManager
     */
    protected $documentManager;

    /**
     * @param array $hierarchy
     * @param DocumentManager $documentManager
     */
    public function __construct(array $hierarchy, DocumentManager $documentManager)
    {
        $this->documentManager = $documentManager;
        parent::__construct($this->buildRolesTree());
    }

    /**
     * @return array
     */
    private function buildRolesTree()
    {
        $hierarchy = [];
        $repository = $this->documentManager->getRepository('UserBundle:Role');
        foreach ($repository->findAll() as $role) {
            if ($role->getParent()) {
                if (!isset($hierarchy[$role->getParent()->getName()])) {
                    $hierarchy[$role->getParent()->getName()] = [];
                }
                $hierarchy[$role->getParent()->getName()][] = $role->getName();
            } else {
                if (!isset($hierarchy[$role->getName()])) {
                    $hierarchy[$role->getName()] = [];
                }
            }
        }

        return $hierarchy;
    }
}
My User
use Doctrine\Bundle\MongoDBBundle\Validator\Constraints\Unique;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\Mapping\Annotations as MongoDB;
use Symfony\Component\Security\Core\User\AdvancedUserInterface;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @MongoDB\Document(collection="user")
 * @Unique(fields={"email"}, groups={"registration"}, message="document.user.field.email.assert.unique")
 * @Unique(fields={"username"}, groups={"registration"}, message="document.user.field.username.assert.unique")
 */
class User implements AdvancedUserInterface
{

    /**
     * @MongoDB\Field(type="string")
     * @MongoDB\UniqueIndex(unique=true)
     * @Assert\NotBlank(groups={"registration"}, message="form.registration.field.email.assert.notblank")
     * @Assert\Email(groups={"registration"}, message="form.registration.field.email.assert.email")
     */
    protected $email;

    /**
     * @MongoDB\Field(type="string")
     * @MongoDB\UniqueIndex(unique=true)
     * @Assert\NotBlank(groups={"registration"}, message="form.registration.field.username.assert.notblank")
     * @Assert\Regex(pattern="/[a-bA-B0-9-_]+/", groups={"registration"}, message="form.registration.field.username.assert.regex")
     */
    protected $username;

    /**
     * @MongoDB\Field(type="string")
     */
    protected $firstname;

    /**
     * @MongoDB\Field(type="string")
     */
    protected $lastname;

    /**
     * @MongoDB\Field(type="string")
     */
    protected $password;

    /**
     * @Assert\NotBlank(groups={"registration"}, message="form.registration.field.plainPassword.assert.notblank")
     */
    protected $plainPassword;

    /**
     * @MongoDB\Field()
     * @MongoDB\ReferenceMany(targetDocument="Role", inversedBy="users")
     */
    protected $roles = null;

    /**
     * @MongoDB\Field(type="boolean")
     */
    protected $active = false;

    /**
     * @MongoDB\Field(type="boolean")
     */
    protected $locked = false;

    /**
     * @MongoDB\Field(type="boolean")
     */
    protected $expired = false;

    /**
     * @MongoDB\Field(type="boolean")
     */
    protected $expiredPassword = false;

    public function __construct()
    {
        $this->roles = new ArrayCollection();
    }

    /**
     * Returns the roles granted to the user.
     *
     * <code>
     * public function getRoles()
     * {
     *     return array('ROLE_USER');
     * }
     * </code>
     *
     * Alternatively, the roles might be stored on a ``roles`` property,
     * and populated in any number of different ways when the user object
     * is created.
     *
     * @return array The user roles
     */
    public function getRoles()
    {
        return $this->roles->toArray();
    }

    /**
     * Returns the password used to authenticate the user.
     *
     * This should be the encoded password. On authentication, a plain-text
     * password will be salted, encoded, and then compared to this value.
     *
     * @return string The password
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Returns the salt that was originally used to encode the password.
     *
     * This can return null if the password was not encoded using a salt.
     *
     * @return string|null The salt
     */
    public function getSalt()
    {
        return null;
    }

    /**
     * Returns the username used to authenticate the user.
     *
     * @return string The username
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Removes sensitive data from the user.
     *
     * This is important if, at any given point, sensitive information like
     * the plain-text password is stored on this object.
     */
    public function eraseCredentials()
    {
        $this->plainPassword = '';
    }

    /**
     * Checks whether the user's account has expired.
     *
     * Internally, if this method returns false, the authentication system
     * will throw an AccountExpiredException and prevent login.
     *
     * @return bool true if the user's account is non expired, false otherwise
     *
     * @see AccountExpiredException
     */
    public function isAccountNonExpired()
    {
        return !$this->expired;
    }

    /**
     * Checks whether the user is locked.
     *
     * Internally, if this method returns false, the authentication system
     * will throw a LockedException and prevent login.
     *
     * @return bool true if the user is not locked, false otherwise
     *
     * @see LockedException
     */
    public function isAccountNonLocked()
    {
        return !$this->locked;

    }

    /**
     * Checks whether the user's credentials (password) has expired.
     *
     * Internally, if this method returns false, the authentication system
     * will throw a CredentialsExpiredException and prevent login.
     *
     * @return bool true if the user's credentials are non expired, false otherwise
     *
     * @see CredentialsExpiredException
     */
    public function isCredentialsNonExpired()
    {
        return !$this->expiredPassword;

    }

    /**
     * Checks whether the user is enabled.
     *
     * Internally, if this method returns false, the authentication system
     * will throw a DisabledException and prevent login.
     *
     * @return bool true if the user is enabled, false otherwise
     *
     * @see DisabledException
     */
    public function isEnabled()
    {
        return $this->active;
    }

    /**
     * Get id
     *
     * @return id $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set email
     *
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string $email
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set username
     *
     * @param string $username
     * @return $this
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Set firstname
     *
     * @param string $firstname
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->firstname = $firstname;

        return $this;
    }

    /**
     * Get firstname
     *
     * @return string $firstname
     */
    public function getFirstname()
    {
        return $this->firstname;
    }

    /**
     * Set lastname
     *
     * @param string $lastname
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->lastname = $lastname;

        return $this;
    }

    /**
     * Get lastname
     *
     * @return string $lastname
     */
    public function getLastname()
    {
        return $this->lastname;
    }

    /**
     * Set password
     *
     * @param string $password
     * @return $this
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Add role
     *
     * @param Role $role
     */
    public function addRole(Role $role)
    {
        $this->roles[] = $role;
    }

    /**
     * Remove role
     *
     * @param Role $role
     */
    public function removeRole(Role $role)
    {
        $this->roles->removeElement($role);
    }

    public function hasRole(Role $role)
    {
        return $this->roles->contains($role);
    }

    /**
     * Set active
     *
     * @param bool $active
     * @return $this
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return bool $active
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * Set locked
     *
     * @param bool $locked
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->locked = $locked;

        return $this;
    }

    /**
     * Get locked
     *
     * @return bool $locked
     */
    public function getLocked()
    {
        return $this->locked;
    }

    /**
     * Set expired
     *
     * @param bool $expired
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->expired = $expired;

        return $this;
    }

    /**
     * Get expired
     *
     * @return bool $expired
     */
    public function getExpired()
    {
        return $this->expired;
    }

    /**
     * Set expiredPassword
     *
     * @param bool $expiredPassword
     * @return $this
     */
    public function setExpiredPassword($expiredPassword)
    {
        $this->expiredPassword = $expiredPassword;

        return $this;
    }

    /**
     * Get expiredPassword
     *
     * @return bool $expiredPassword
     */
    public function getExpiredPassword()
    {
        return $this->expiredPassword;
    }

    /**
     * @return string
     */
    public function getPlainPassword()
    {
        return $this->plainPassword;
    }

    /**
     * @param string $plainPassword
     * @return $this
     */
    public function setPlainPassword($plainPassword)
    {
        $this->plainPassword = $plainPassword;

        return $this;
    }
}
My Role
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\Mapping\Annotations as MongoDB;
use Symfony\Component\Security\Core\Role\RoleInterface;

/**
 * @MongoDB\Document(collection="role")
 */
class Role implements RoleInterface
{

    /**
     * @MongoDB\Field(type="string")
     * @MongoDB\UniqueIndex(unique=true)
     */
    protected $name;

    /**
     * @MongoDB\Field()
     * @MongoDB\ReferenceOne(targetDocument="Role", inversedBy="children")
     */
    protected $parent = null;

    /**
     * @MongoDB\Field()
     * @MongoDB\ReferenceMany(targetDocument="Role", mappedBy="parent")
     */
    protected $children = null;

    /**
     * @MongoDB\Field()
     * @MongoDB\ReferenceMany(targetDocument="User", mappedBy="roles")
     */
    protected $users = null;

    /**
     * Role constructor.
     * @param string $name
     */
    public function __construct(string $name)
    {
        $this->children = new ArrayCollection();
        $this->users = new ArrayCollection();
        $this->name = $name;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string $name
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set parent
     *
     * @param Role $parent
     * @return $this
     */
    public function setParent(Role $parent)
    {
        $this->parent = $parent;

        return $this;
    }

    /**
     * Get parent
     *
     * @return Role $parent
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Add child
     *
     * @param Role $child
     */
    public function addChild(Role $child)
    {
        $this->children[] = $child;
    }

    /**
     * Remove child
     *
     * @param Role $child
     */
    public function removeChild(Role $child)
    {
        $this->children->removeElement($child);
    }

    /**
     * Get children
     *
     * @return ArrayCollection $children
     */
    public function getChildren()
    {
        return $this->children;
    }

    /**
     * Add user
     *
     * @param User $user
     */
    public function addUser(User $user)
    {
        $user->addRole($this);
    }

    /**
     * Remove user
     *
     * @param User $user
     */
    public function removeUser(User $user)
    {
        $user->removeRole($this);
    }

    public function containsUser(User $user)
    {
        return $this->users->contains($user);
    }

    /**
     * Get users
     *
     * @return ArrayCollection $users
     */
    public function getUsers()
    {
        return $this->users;
    }

    /**
     * Returns the role.
     *
     * This method returns a string representation whenever possible.
     *
     * When the role cannot be represented with sufficient precision by a
     * string, it should return null.
     *
     * @return string|null A string representation of the role, or null
     */
    public function getRole()
    {
        return $this->name;
    }

}

