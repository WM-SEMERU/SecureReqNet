Refactor Protos: Renaming Mutations & include signatures in Entry


Remove SignedKV and Mutation and add the index and signatures to Entry.
The signatures in the Entry are there for clients/monitors to being able to check and potentially publish who changed the Entry. The index is also needed in Entry as the signature is on the map-index, too.
// Entry is a signed change to the map. 
// It is stored as a leaf in the map . At the same it represents a mutation.
message Entry {
  // index is the map entry key.
  bytes index = 1;
  // commitment is a cryptographic commitment to arbitrary data.
  bytes commitment = 2;
  // authorized_keys is the set of keys allowed to sign updates for this entry.
  repeated PublicKey authorized_keys = 3;  
  // signatures on key_value. Must be signed by keys from both previous and
  // current epochs. The first proves ownership of new epoch key, and the
  // second proves that the correct owner is making this change.
  map<string, sigpb.DigitallySigned> signatures = 4;
  // back-pointer to previous leaf value
  bytes previous = 3;
}

// MutationProof contains the actual mutation and the inclusion proof of the
// corresponding leaf. It is the data structure monitors receive to validate and 
// apply a mutation.
message MutationProof {
  // update contains the actual mutation information.
  // TODO: figure out if we want to keep this generic and embed proto.Any here instead. 
  Entry mutation = 1;
  // proof contains a leaf and an inclusion proof in the map of the previous
  // epoch. This is used by Storage-less monitors.
  trillian.MapLeafInclusion proof = 2;
}
Entry is the thing we will store in the map. MutationProof is the thing monitors receive.
This depends on #769 and is related to #758, #387
