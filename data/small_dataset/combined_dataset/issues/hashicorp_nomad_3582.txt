raw_exec user.blacklist is not enforced unless the user is specified in the job spec


Nomad version
Nomad v0.7.0
Operating system and Environment details
CentOS Linux release 7.3.1611 (Core)
nomad runs as root
Issue
The exec driver runs tasks like this:
	execCmd := &executor.ExecCommand{
		Cmd:            command,
		Args:           driverConfig.Args,
		FSIsolation:    true,
		ResourceLimits: true,
		User:           getExecutorUser(task),
	}
Whereas the raw_exec driver runs tasks like this:
	execCmd := &executor.ExecCommand{
		Cmd:  command,
		Args: driverConfig.Args,
		User: task.User,
	}
getExecutorUser ensures that if the user is not set in the job specification, DefaultUnpriviledgedUser runs the job, which is set to "nobody".  However for raw_exec does not do the same. If the user is not set, this means the job runs as the same user that Nomad is running as. In our case, we run Nomad as root, and we blacklist root. However simply by omitting the "user" from the job spec file, it is possible for Nomad users to run jobs as root. This completely circumvents the user.blcklist. I suggest using getExecutorUser(task) for both exec and raw_exec.
Reproduction steps
Using the following client config:
client {
  options = {
    "driver.raw_exec.enable" = "1"
    "driver.whitelist" = "raw_exec"
    "user.checked_drivers" = "raw_exec"
    "user.blacklist" = "root"
  }
}
And a very simple job spec. e.g.
  task "sleep" {
    driver = "raw_exec"
    user = "root"

    config {
      command = "/usr/bin/sleep"
      args    = ["60"]
    }
  }
Versus:
  task "sleep" {
    driver = "raw_exec"

    config {
      command = "/usr/bin/sleep"
      args    = ["60"]
    }
  }
If we specify user = "root" the task is not permitted to run, as expected. However, if we omit the user, the task is allowed to run as root.
