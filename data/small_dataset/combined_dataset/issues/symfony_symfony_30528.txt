Interface aliaes are private though declared public when configuring multiple services with resource


Symfony version(s) affected: 4.2.*
Description
When importing multiple services at once with resource and public: true like the following. I expect the singly-implemented interfaces to be public as well. But they still turn out to be private aliases.
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
        public: true

How to reproduce

Create a symfony project by composer create-project symfony/website-skeleton privateinterfaces
Add public: true to the following section in config.yaml

    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
        public: true


Create src/Repository/Foo.php and src/Repository/FooInterface.php

<?php

namespace App\Repository;

class Foo implements FooInterface {
    public function bar(): void {}
}

<?php

namespace App\Repository;

interface FooInterface {
    public function bar(): void;
}


php bin/console debug:container foointerface, you will see "// This service is a private alias for the service App\Repository\Foo".
You can also make a simple file like the following and it will raise the error:


The "App\Repository\FooInterface" service or alias has been removed or inlined.

<?php

use App\Kernel;
use App\Repository\FooInterface;

require __DIR__.'/vendor/autoload.php';

$kernel = new Kernel('dev', true);
$kernel->boot();
$container = $kernel->getContainer();
$container->get(FooInterface::class);

This means the alias itself is still private while the service implementation is public. Which means we cannot get a implementation from the interface by $container->get(FooInterface::class)
Possible Solution
I found the related code should be in symfony/dependency-injection/Loader/FileLoader.php
    public function registerClasses(Definition $prototype, $namespace, $resource, $exclude = null)
    {
        // ......
        foreach ($interfaces as $interface) {
            if (!empty($singlyImplemented[$interface])) {
                $this->container->setAlias($interface, $singlyImplemented[$interface])
                    ->setPublic(false);  // lineno: 81
            }
        }
    }

So the singly-implemented are directly set to be public: false, probably should inherit the public value of the their implementation. Like
        foreach ($interfaces as $interface) {
            if (!empty($singlyImplemented[$interface])) {
                $definition = $this->container->getDefinition($singlyImplemented[$interface]);
                $this->container->setAlias($interface, $singlyImplemented[$interface])
                    ->setPublic($definition->isPublic());
            }
        }

