[Routing] inject complex values based on complex expression in routes


Description
I would like to propose a new feature for the Routing Component. Being able to remap the routes variables or to inject complex values based on complex expression.
Based on what is described in this documentation "How to Configure a Redirect without a custom Controller", there is no possibility to inject complex values based on complex expressions like it is possible for services ("How to Inject Values Based on Complex Expressions").
Example # 1 (inject complex values based on complex expression)
in my twig file:
<a href="{{ path('center_timetable_edit', {'center': entity.id, 'timetable': tt.id}) }}"> Edit</a>
in my routing.yaml:
center_timetable_edit:
    path: /admin/center/{center}/timetable/{timetable}/edit
    controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController::redirectAction
    defaults:
        route: easyadmin
        permanent: false
        keepQueryParams: true
        entity: TimeTable
        action: edit
        id: "@=service('request_stack').getCurrentRequest().attributes.get('timetable')"
Today, the line "@=service('request_stack').getCurrentRequest().attributes.get('timetable')" is not interpreted as it is for services. The error EntityNotFoundException is thrown: "The "TimeTable" entity with "id = @=service('request_stack').getCurrentRequest().attributes.get('timetable')" does not exist in the database. "
Example # 2 (remap the routes variables)
center_timetable_edit:
    path: /admin/center/{center}/timetable/{timetable}/edit
    controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController::redirectAction
    defaults:
        route: easyadmin
        permanent: false
        keepQueryParams: true
        entity: TimeTable
        action: edit
   map:
        id: timetable #which will use the value in the route definition {timetable}
A bit of context
We are rebuilding our Symfony2 application from scratch (SportFinder). We used to generate our admin with the doctrine:generate:crud command and implement feature based on that.
Now we are using Symfony4 and EasyAdminBundle. We have imported most of our twig templates and we are in process of rewrite some of our features. In the meantimes, we decided to launch a smaller version of our app based on SF4. In order to not delete and readd part of our templates/routing/features code, we decided to decouple our routes which help us to move fast and to not break everything.
