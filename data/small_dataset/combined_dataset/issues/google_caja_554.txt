Domita: TamedNode provides more authority than one might expect


Original issue 554 created by google@web.dwdw.me on 2008-06-12T18:50:10.000Z:
Currently in Domita, a reference to a TamedNode provides authority to
access not only the subtree rooted at that node but also its sibling nodes
and the subtrees rooted at those subtrees (due to getNextSibling etc.).
This is more than one might normally expect.  At a minimum it should be
documented as a hazard or as part of the interface of a TamedNode, but it
might be nice to think about whether there are any better solutions to
avoid excess authority.
David-Sarah suggested one approach: a Cursor object C is a pair of a
reference R to a "current node" and a child-closed set S (child-closed
means if x is in S then all children of x are in S).  Invariant: the
subtree rooted at R must be contained in the set of nodes described by S.
Operations on C operate on the node referenced by R.  Also we can support
C.getParent() which checks that the parent is contained in S and returns
another cursor C' = (R.getParent(),S).  Similarly one can support
getNextSibling() etc.  Also one supports an operation C.attenuate(T), which
returns the new cursor C' = (R,T) if T is a child-closed subset of S and
otherwise fails; and an operation C.strengthen(T), which returns the new
cursor C' = (R,T) if T is a child-closed set of nodes (perhaps specified as
the root of a subtree, or a forest of subtrees) and if S is a subset of T.
Now the cursor C = (R,S) provides authority to all nodes in S, but refers
("points at") to node R.  Think of S as a "high water mark" of what cursors
derived from S (ignoring attenuate/strengthen) can refer to.  The Gadget
would initially receive a cursor that refers to its entire subtree and has
its entire subtree as high water mark.  An event handler would receive a
cursor that refers to the DOM node where the event occured and has the
subtree rooted at that DOM node as high water mark.  when gadgets
communicate with each other, they'd have to attenuate all their cursors so
that their high water mark is the subtree of nodes is the same as the node
that it refers so (as a feature, we might make C.attenuate() return such a
cursor).  Tradeoffs: This might provide a way to support
getParent()/getNextSibling() for legacy code, without modifications to
legacy code, but on the other hand it might introduce opportunities for
security bugs where we forget to call attenuate() on all cursors before
passing them across a security boundary (e.g., to another gadget).
Recommendation: Think about this issue and its security consequences a bit
further, and document what you decide somewhere so that programmers know
what to expect.
