Proposal: Record which user created an object


Currently no creator information is recorded at the time an object is created. The creator may be:

an end user calling the api (authenticated via the Authenticator interfaces)
a controller calling the api (authenticated via Authenticator)
a core controller locally invoking the storage interfaces (bypasses authentication)
someone directly editing etcd (repair process or object created in the past).

It is a common requirement to record audit information with objects that allow UIs and administrators to determine the actor involved in a transaction. The information may be recorded in a side channel (an audit log), but end users may also wish to understand who created a particular object.
Use cases:

Allow clients to determine which user made a change
Allow an administrator to reconstruct an audit record for who created which resources were created in the system

In the first two scenarios above, the user is clearly identified (GetUserName() on the user resolved by the authenticator, which rest.Storage has access to).  In the third, this is effectively what we call a "system" user, and could be assigned an arbitrary username that does not collide with real user names, or left blank.  In the last case there is probably a user name, but no mechanism whereby it is provided.
Considerations
Inferential attribution

Actions may not be undertaken by a user, but on behalf of a user

the replication controller process creates pods on behalf of the user who created a replication controller, but if another user edits the replication controller, both users may have a causal relationship to the pods created
a virtual resource may run as elevated privileges against another api and allow a user to create a resource they normally don't have permission to create - both the end user and the api process have a causal relationship to the underlying resource
a higher privilege user may request to run as another user via impersonation - the actor is the higher privilege user, but they are explicitly wishing to be recorded as acting as the impersonated user


Actions may be separated in time and space from their cause

a user may delete a node, which results in a pod being deleted, which results in a pod being created by a replication controller



Recommendation: we should scope the attribution of creation to the caller (direct creator), and ensure that an external "audit log" could be constructed that can infer chain of attribution for complex cases.
Creating child resources
In general, it may be desirable for high level constructs (deployments, scheduled jobs) that create lower level resources (replication controllers, jobs) to propagate creation attribution. However, that raises a security risk that the creating component can lie about the source of a creation. Since an audit trail can be reconstructed between parent and subordinate resources by observing API changes, it is not necessary to propagate that info.
Referencing a user
We currently define a user name as a string that represents a unique user. That value is expected to be stable over the time periods the admin desires (only admin action would result in a user name changing). Under the covers, the user name may refer to many different types of users - the authentication design identifies two:

User

ServiceAccount - a namespaced resource that represents a unique automated identity

In the future, this account may be backed by an external user


ExternalUser - via an external system

May be a human or an external service account





In addition, we have an implicit type:

SystemUser - created implicitly in the infrastructure to represent distinct process identity prior to bootstrapping of service accounts or external users

Which user represents the code in the master that creates the default service account?



The Authenticator interface requires all of the above users to be mapped into a single user name string before filtering through the system. This string is the userName and must be unique across all sources of authentication.
It is assumed that the audit system and other client systems understand the mapping between the various authentication sources and userName.  These mappings may differ between different installations.  It should be possible for a client or third party to provide a userName and retrieve an object (or objects?) representing the source of the user name.
As an example, Kube must overlay the service account user identifier onto the external authenticator source. Today, that is enforced via a unique prefix system:serviceaccount: that is reserved. In the future, we may map ServiceAccount to an external user, in which case the unique prefix may not be needed. OpenShift, which needs to manage users internally as well as externally, uses a further system of subdivision of namespace to assign a userName via indirection.
Proposed change
When objects are created through rest.Storage, record the identifying user info onto the object. Add creationUserName string to ObjectMeta and assign it the GetUserName() value provided by the Authenticator. This value may not be changed, but may be unset if authentication is disabled.
Implications for clients:

Clients will want to show "pretty" names to end users (userName may be email, but may also be a unique identifier or LDAP DN or short name). Clients that wish to do that will need a way to map userName to a useful value efficiently and in bulk (it's assumed that the "pretty name" for a user changes at very infrequent intervals)
Clients may be tempted to assume the userName can be parsed. This limits the admin's ability to change this value. Instruct clients not to assume the userName value will be human readable or that it follows a parseable pattern.

Other implications:

Clients should not be allowed to set the creationUserName.
Administrators may wish to migrate old data to assign a creationUserName.

