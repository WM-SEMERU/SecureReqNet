Fix leaking task resources when nodes are deleted


Signed-off-by: Drew Erny drew.erny@docker.com
- What I did
When a node is deleted, its tasks are asked to restart, which involves putting them into a desired state of Shutdown. However, the Allocator will not deallocate a task which is not in an actual state of a terminal state. Once a node is deleted, the only opportunity for its tasks to recieve updates and be moved to a terminal state is when the function moving those tasks to TaskStateOrphaned is called, 24 hours after the node enters the Down state. However, if a leadership change occurs, then that function will never be called, and the tasks will never be moved to a terminal state, leaking resources.
With this change, upon node deletion, all of its tasks will be moved to TaskStateOrphaned, allowing those tasks' resources to be cleaned up.
- How I did it
Altered the controlapi to move all tasks belonging to the node to the actual state of Orphaned.
- How to test it
Includes a unit test. However, testing for the full failure condition is nontrivial and likely not worth the effort.
- Description for the changelog
Fix bug where deleting nodes could result in task resources leaking.
