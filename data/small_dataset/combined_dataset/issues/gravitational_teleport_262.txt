Proposal for at-rest data encryption


At a high level, the backend server will store two kinds of data. Symmetric key material will be stored encrypted under the public keys of each auth server:
(key id, public key, ephemeral key, ciphertext)

Sensitive data will be stored encrypted under symmetric keys:
(data id, key id, nonce, ciphertext)

New symmetric key material should be generated randomly. Auth servers should store symmetric keys by generating an ephemeral key pair using it to encrypt the symmetric key under each peer's long-term public key.
A given symmetric key may be used for many encryptions. Auth servers may retain symmetric keys in memory to facilitate speedy encryption and decryption of sensitive data. A server should generate a random nonce for each encryption. An auth server can decrypt data by fetching the encrypted data along with its concomitant encrypted symmetric key and then decrypting both.
When a new auth server spins up, some trusted party must encrypt each symmetric key under the new auth server's long-term public key.
When an auth server spins down, several things must happen. First, the server's access to the backend server should be revoked. Each remaining auth server must generate new symmetric key material for any new data encryption. Existing symmetric keys should be deprecated. Any data encrypted under a deprecated key must be decrypted and re-encrypted under fresh key material. Once all data associated with a deprecated key has been re-encrypted, the deprecated key may be deleted.
The limiting factor in key rotation is the amount of data encrypted under a given key. To that end, servers may generate fresh key material more aggressively.
First, servers may choose to use different keys for different data types. The system is expected to operate on several types of data of varying sensitivity and volume. By using separate keys for the most sensitive data and then prioritizing their rotation, the most important data will be vulnerable for the shortest window of time.
Second, servers may choose to generate new key material independent of a deprecation event. This will limit the amount of data encrypted under any given key, which will allow any given key to be rotated more quickly. The rotation process may choose to prioritize more recent keys for rotation.
The system should use the NaCl protocol as the cryptographic primitive for all operations.
