Angular purges <script type="text/plain" as if it were a security vulnerability


I'm submitting a...

[x] Bug report  
[x] Feature request

Background
Imagine you have the following webcomponent:
<expression>
	<script type='text/plain'>
		If(var1 < var2,
			Sum([Field 1])
		,
			Sum([Field 2])
		)
	</script>
</expression>
The component reads the text inside the script tag and sends it to a server which evaluates the result.
The webcomponent should be embedded in an Angular App. It is no Angular component and should just rendered as is.
It has to contain a script tag because 'text/plain' allows it not to be parsed as HTML and like this, it is possible for expressions to contain characters like < as in var1 < var2 without being recognized as the beginning of a html tag.
Current behavior
Angular deletes all script tags inside templates, also those with text/plain. I read, that this is because you shouldn't mix JavaScript with Angular Templates, but this is just plain text.
Expected behavior
<script type="text/plain" should not be deleted. It is the only way to integrate text without having to escape all html characters.
Minimal reproduction of the problem with instructions
Insert the following code into a template and see if it will be deleted.
<script type='text/plain'>
    If(var1 < var2,
        Sum([Field 1])
    ,
        Sum([Field 2])
    )
</script>
What is the motivation / use case for changing the behavior?
If <script type="text/plain" would not be deleted it is possible to insert everything which is not html without having to escape it. HTML 5 supports it and as far as I know there is no alternative. Also it isn't a security vulnerability.
Environment

Angular version: 6.1.0
Browser:
- [x] Chrome (desktop) version 69

