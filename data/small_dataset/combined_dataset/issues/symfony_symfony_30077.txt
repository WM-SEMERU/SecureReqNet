[Form] Support dynamic error_mapping rules





Q
A




Branch?
master


Bug fix?
no


New feature?
yes


BC breaks?
no


Deprecations?
no


Tests pass?
yes


Fixed tickets
-


License
MIT


Doc PR
TODO



When you build a form with a dynamic structure (unknown number of fields) or when you use a custom data mapper, or both, error_mapping can be hard to use depending of how your data end up in being mapped in yout model. I thought it would be nice to be able to define dynamic rules.
Example with a model that would put everything in a $stack property, indexed by a type.
Current :
<?php

class ParentType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        foreach ($options['types'] as $type) {
            $builder->add(sprintf('sub_%s', $type), SubType::class);
        }
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'data_class' => Parent::class,
            'error_mapping' => function (Options $options): array {
            	return array_combine(array_map(function (string $type): string {
                    return sprintf('stack[%s]', $type);
                }, $options['types']), array_map(function (string $type): string {
                    return sprintf('sub_%s', $type);
                }, $options['types']));
            },
        ]);
        $resolver->setRequired('types');
        $resolver->setAllowedTypes('types', 'array');
    }
}
After :
<?php

class ParentType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        foreach ($options['types'] as $type) {
            $builder->add(sprintf('sub_%s', $type), SubType::class);
        }
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'data_class' => Parent::class,
            'error_mapping' => [
            	'stack[*]' => 'sub_*',
            ],
        ]);
        $resolver->setRequired('types');
        $resolver->setAllowedTypes('types', 'array');
    }
}
TODO :

 Add more tests
 Update CHANGELOG
 Update doc

One more thing that I would like to do (in a separate PR) whether this feature end up being merged or not would be to validate the right side (that contains the names of fields in the form) of error mappings whether there is match or no. For a better DX, I think we should throw an useful exception if the path is not a simple property path (ie with no index) effectively corresponding to the target form child. Currently, there is an exception only if there is a match.
The proposed implementation is backward compatible since a * cannot be in a valid form name.
