Security hole opened by interim tameNode() cache


Original issue 929 created by erights on 2008-11-15T20:46:06.000Z:
The current code for tameNode() in HEAD is:
function tameNode(node, editable) {
  if (node === null || node === void 0) { return null; }
  // TODO(mikesamuel): make sure it really is a DOM node

  // TODO(benl): replace this with a proper cache
  if (node.tamed___)
return node.tamed___;

The above naive caching code means that if dom node A is, for example,
first wrapped with an editable wrapper, a later attempt to wrap A with a
read-only wrapper may instead return the editable wrapper, subverting the
attempted attenuation of authority.
For other possible problems, see the discussion thread at
<http://groups.google.com/group/google-caja-discuss/browse_thread/thread/6d03a2bfd9163b72>.
At the time of this writing, the testbed applet is the only container we
know of that allows the sharing that the above cache code breaks, so I'm
reporting this bug publicly. No "responsible disclosure" is needed for this
case.
I wonder: Perhaps we should have a responsible disclosure fire drill next
time we have a currently-mostly-harmless security bug such as this one? Or
perhaps we should carry out the fire drill in public using this bug itself,
so that everyone can observe our responsible disclosure process in action?
