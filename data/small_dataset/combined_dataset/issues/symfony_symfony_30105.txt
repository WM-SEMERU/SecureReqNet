Denormalizers should not instantiate empty objects for null values


Description
When ObjectNormalizer denormalizes null value for a class property that is type hinted as object of specific class it should not instantiate new object instance of that class. Instead, it should use null value, unless configured differently by denormalization context.
Example
Let's assume we have a json payload as follows:
{
    "property1": "testValue",
    "property2": null
}

... and for the sake of argument these two php classes:
<?php
class Foo
{
    /**
     * @var string
     */
    public $property1;

    /**
     * @var Bar
     */
    public $property2;
}

class Bar
{
    /**
     * @var int
     */
    public $id = 0;
}

By deserializing json payload I get the following:
$payload = '{"property1": "testValue","property2": null}';
$data    = $this->serializer->deserialize($payload, Foo::class, 'json');
print_r($data);

Result:
\Foo Object
(
    [property1] => testValue
    [property2] => \Bar Object
        (
            [id] => 0
        )
)

Note that property2 has been deserialized as an empty object of class \Bar. Perhaps I'm mistaken but this was not asked from denormalizer explicitly.
I suppose this might be resolved by introducing \Symfony\Component\Serializer\Normalizer\AbstractObjectNormalizer::SKIP_NULL_VALUES in the similar way as already implemented in normalizer updateData method.



symfony/src/Symfony/Component/Serializer/Normalizer/AbstractObjectNormalizer.php


        Lines 434 to 436
      in
      a6a1be8






  if (null === $attributeValue && ($context[self::SKIP_NULL_VALUES] ?? $this->defaultContext[self::SKIP_NULL_VALUES] ?? false)) { 



  return $data; 



         } 





An idea that currently sounds feasible to me is to null check value in \Symfony\Component\Serializer\Normalizer\AbstractObjectNormalizer::validateAndDenormalize for Type::BUILTIN_TYPE_NULL and make sure the skip_null_values denormalization value is true.
If you think this might be an acceptable solution let me know about potential PR.
Using symfony/serializer 4.2.2.
Sorry for long text :)
