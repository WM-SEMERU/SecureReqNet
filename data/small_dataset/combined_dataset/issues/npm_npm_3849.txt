Global install file-ownership ‚Äúnobody‚Äù - is this really sane ?


I known this is a üí•-topic, as already seen in the now closed issue https://github.com/isaacs/npm/issues/601 . Nevertheless I'd like to add some thoughts I have missed in the former discussions.
But before I start to dig into this topic, I'd like to mention that I really appreciate the work done in npm as well as node.js. Keep up the good work! ü§ò
I'll base my assumptions on a quotation from http://en.wikipedia.org/wiki/Nobody_(username) :

In many Unix variants, "nobody" is the conventional name of a user account which owns no files, is in no privileged groups, and has no abilities except those which every other user has.

The point I struggle with is: nobody ‚Ä¶ owns no files. This is true for every fresh installed Linux I've seen so far, as well as all BSDs including OS X. Please, prove me that I'm wrong ! ‚Ä¶ I'm talking here about real files, not file-descriptors of unix-domain-sockets or linux-devices.
But first let us continue with the quotation, without drawing any conclusions:

It is common to run daemons as nobody, especially servers, in order to limit the damage that could be done by a malicious user who gained control of them. However, the usefulness of this technique is reduced if more than one daemon is run like this, because then gaining control of one daemon would provide control of them all.

This is only partially true - on modern operating systems proper ACLs, sandboxes, chroots and other security enhancing techniques protect from such weaknesses.

The reason is that nobody-owned processes have the ability to send signals to each other  and even debug each other, allowing them to read or even modify each other's memory.

This also is partially true - because every daemon (process) is able to use private/protected memory areas isolated from other processes, if security is really a concern and the proper OS provides such techniques.

So let me sum up the (to my mind) major points, and mark npm's compliance to these assumptions with:

‚≠ïÔ∏è ok, npm's global install privileges do not weaken security or
do not implicitly suffer from weaknesses
‚ùå not ok, npm's global install privileges weaken security or
suffer from weaknesses implicitly


Please, keep in mind, that I struggle with npm's global install behavior - especially with the nobody-ownership !

‚ùå nobody owns no files:

npm installs files globally owned by nobody
if one decides to run a service as nobody (not very uncommon)
it can modify everything installed by npm globally
If one decides to run more than one service as nobody then filesystem ACLs,
sandboxes or chroots may protect these services from each other, but
avoiding nobody-ownership and still let the services run as nobody would be the
‚Äúcheapest‚Äù approach.


‚≠ïÔ∏è nobody does not run more than one service

npm/node.js does not force any service to run as nobody, it's up to the
implementation to gain proper privileges
Again, if one deliberately runs more than one service as nobody, then other
ways of protecting these services from each other are available, without any
negative effects but certainly with overhead
Changing global install ownership won't help here, it's up to the implementation


‚ùå services running as nobody, can not tweak other nobody-services' signals

obviously true. As long as there are no protections build into the services,
every other service can connect to other services and send IPC signals
Changing global install ownership won't help here, it's up to the implementation


‚≠ïÔ∏è services running as nobody, can not tweak other nobody-services' memory

I don't know any way of accessing memory under node.js, that does not
imply, that there is no way (maybe someone implements a native-module to
do so)
Changing global install ownership won't help here, it's up to the implementation




My personal conclusion: npm is the only tool I know, installing files owned by nobody (globally). This scares me (üëª) a little bit - but I have to admit that I have no death-prove way to exploit this fact. Only thoughts ‚Ä¶
My personal wish (üéÅ) : I'd like to have the chance to configure/override the global install ownership, without touching the process uid/gid of globally running npm-scripts. (Please read my second comment to get a clue what changes I'd like to incorporate.)
Did I overlook something ? Is it already there ? Am I (too) paranoid ? (If yes, yes or yes then I'm really sorry to waste your time!)
If not I'd like to offer a branch to pull (), with such an option implemented, but only if you're willing to incorporate such a feature and moreover if we find a common denominator in an upcoming discussion.
I really appreciate any feedback - even if so much has already been said and written !
Thanks a lot,
Stephan
üôä üôâ üôà
