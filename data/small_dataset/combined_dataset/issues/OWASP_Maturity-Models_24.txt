Data_Files.set_File_Data - allows editing of coffee-script files (RCE)


Related to #19 and #23 it will be possible to do RCE on the server by editing one of the existing data coffee-scripts files (for example the one used to create random data)
Here is the code from Data-Files that creates the security issue, note how the file is updated and the code is executed
  it 'Issue 24 - Data_Files.set_File_Data - allows editing of coffee-script files (RCE)', ->

    using new Data_Files(), ->
      # PREPARE
      new_File_Contents = 'module.exports = ()-> 40+2'
      file_Name         = 'coffee-data'
      file_Path         = @.find_File file_Name
      file_Contents = file_Path.file_Contents()
      @.get_File_Data(file_Name).user.assert_Is 'in coffee'        # confirm original data

      # TEST
      @.set_File_Data file_Name, new_File_Contents                 # PAYLOAD make change
      file_Path.file_Contents().assert_Is new_File_Contents        # confirm it was changed
      delete require.cache[file_Path]                              # clean the node cache
      @.get_File_Data(file_Name).assert_Is '42'                    # it should be 42 now (which means that the payload was executed

      # CLEAN
      @.set_File_Data file_Name, file_Contents                     # restore file contents
      file_Path.file_Contents().assert_Is file_Contents            # confirm it was reset ok
      delete require.cache[file_Path]                              # clear the cache again
      @.get_File_Data(file_Name).user.assert_Is 'in coffee'        # confirm original data

Here is the source of the method (that creates the vuln)
  # Issue 20 - Data_Files.set_File_Data - DoS via filename and file_Contents  
  # Issue 24 - Data_Files.set_File_Data - allows editing of coffee-script files (RCE)
  set_File_Data: (filename, file_Contents) ->

    if not filename or not file_Contents                # check if both values are set
      return null

    if typeof file_Contents isnt 'string'               # check if file_Contents is a string
      return null

    file_Path = @.find_File filename                    # resolve file path based on file name

    if file_Path is null or file_Path.file_Not_Exists() # check if was able to resolve it
      return null

    file_Path.file_Write file_Contents
