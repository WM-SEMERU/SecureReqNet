Creating JwtSecurityToken vs using OpenID connect for Web API


I currently create JwtSecurityToken and return the token to the user after request to /account/login. I use jwt bearer middleware that handles token verification upon each request. Everything works fine. I don't use OpenID Connect nor OAuth2.
Does it also mean I use my own protocol?
Now, what would be the advantage over this approach if I used OpenID Connect (through IdentityServer or OpenIddict)?
I'm still new to these protocols and I'm only familiar with JWT (format) itself.
From my basic understanding OAuth2 or OpenID Connect is used when I want to expose my API to third parties, but what if I need to  secure my private API and I don't want anything else except my programs (native,mobile,web) to have access to it. Would those protocols still help?
I was reading one advantage is Single sign-on (SSO) but if JWT itself can be shared across domains etc. wouldn't it mean I can achieve the same without OpenID?
Please note that I know JWT is format and OpenID Connect is extended OAuth2 protocol standard that use JWT. And IdentityServer, OpenIddict are implementations of these protocols.
