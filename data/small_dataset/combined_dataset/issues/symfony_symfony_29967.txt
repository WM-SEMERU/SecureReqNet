ArrayInput do not validate options defined as NO_VALUE


Symfony version(s) affected: ^3.4
Description
ArrayInput do not validate the long options defined with mode NO_VALUE, and therefore accept values on such options.
When using CLI, options are retrieved in an ArgvInput, and mode NO_VALUE is indeed validated when passing long options:
https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/ArgvInput.php#L223
But when using the CommandTester, options are retrieved in an ArrayInput, and mode NO_VALUE isn't properly validated when passing long options:
https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/ArrayInput.php#L177
How to reproduce
if i have a command with an option defined as :
<?php

namespace App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class FooCommand extends Command
{
    protected static $defaultName = 'app:foo:bar';

    protected function configure(): void
    {
        $this->addOption('foo', 'f', InputOption::VALUE_NONE, 'This parameter does not accept any value.');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $value = $input->getOption('foo');

        $output->writeln('I can even use the value:'. $value);
    }
}

Then this test :
<?php

namespace App\Tests\Command;

use App\Command\FooCommand;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Console\Tester\CommandTester;

class FooCommandTest extends KernelTestCase
{
    public function testOptionValueNoneStillAcceptValues()
    {
        $kernel = static::createKernel();
        $application = new Application($kernel);

        $command = $application->find('app:foo:bar');
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command'  => $command->getName(),

            // option defined as VALUE_NONE
            '--foo' => 'bar',
        ]);

        $output = $commandTester->getDisplay();
        $this->assertContains('I can even use the value: bar', $output);

        // ...
    }
}

It should fail because of the configuration of my command, but still succeed.
It is a problem: if I mistakenly configure my option with mode VALUE_NONE: my tests will pass (and the value will be used) but I wont be able to use this option in my CLI (since passing values will trigger an error)
Possible Solution
#29948
