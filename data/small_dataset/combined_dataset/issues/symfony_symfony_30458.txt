[Console] The Application all() method inconsistent results of two executions.


Symfony version(s) affected: 4.2.4
Description
The Application all() method inconsistent results of two executions.
The instruction corresponding to the alias is not listed when it is executed for the first time.

maybe CommandLoaderInterface->getNames() returns the command name and the command alias is the correct behavior? But this is very strange. There is also no description on the interface comment that you need to return an alias.

How to reproduce

Create an test file: tests/Symfony/ConsoleApplicationTests.php, and copied test code.

<?php

namespace App\Tests\Symfony;

use PHPUnit\Framework\TestCase;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\CommandLoader\CommandLoaderInterface;
use Symfony\Component\Console\Command\Command;

class ConsoleApplicationTests extends TestCase
{
    public function testApplicationMethodAll(): void
    {
        $app = new Application();
        $app->add(new SimpleCommand());
        $app->setCommandLoader(new TestCommandLoader());

        $first = $app->all();
        $second = $app->all();
        $this->assertEquals(count($first), count($second));
    }
}

class TestCommandLoader implements CommandLoaderInterface
{
    public function get($name)
    {
        if($name === "bar")
            return new BarCommand();
        
        if($name === "foo")
            return new FooCommand();

        throw new Exception();
    }
    public function has($name)
    {
        return $name === "bar" || $name === "foo";
    }
    public function getNames()
    {
        return ["bar", "foo"];
    }
}

class SimpleCommand extends Command
{
    protected function configure()
    {
        $this->setName("simple")
             ->setAliases(["simple-alias-1", "simple-alias-2"]);
    }
}

class FooCommand extends Command
{
    protected function configure()
    {
        $this->setName("foo")
             ->setAliases(["foo-alias-1", "foo-alias-2"]);
    }
}

class BarCommand extends Command
{
    protected function configure()
    {
        $this->setName("bar")
             ->setAliases(["bar-alias-1", "bar-alias-2"]);
    }
}
php bin/phpunit tests/Symfony/ConsoleApplicationTests.php
Results

The command name we got the result. For easy display.

$first = [ "help" , "list", "simple", "simple", "simple", "bar", "foo"];
$second = [ "help", "list", "simple", "simple", "simple", "bar", "bar", "bar", "foo", "foo", "foo" ];
The alias corresponding to the command in $first is not listed.
Possible Solution

src/Symfony/Component/Console/Application.php #L696 - all()

if (!$this->commandLoader) {
    return $this->commands;
}
$commands = $this->commands;
foreach ($this->commandLoader->getNames() as $name) {
    if (!isset($commands[$name]) && $this->has($name)) {
        $commands[$name] = $this->get($name);
    }
}
When there is no commandLoader, the returned commands map contains aliases(Expanded the alias in the add() method).
However, when commandLoader exists, if the command is not added, but through has()(passively added) the returned list will not have an alias command.
Additional context
Maybe it was because I did not use it correctly and caused this problem? But this makes me feel very strange. I hope someone can help answer the question of what the correct behavior of this method is.
