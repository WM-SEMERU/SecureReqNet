Event loops/Message pumps security issues


Just some sharing of this paper: https://arxiv.org/abs/1702.06764 "Loophole: Timing Attacks on Shared Event Loops in Chrome".
What I find particularly interesting is that, besides the 'script event-loop' sharing attacks they perform(which are only possible when browsing context would actually share a script-thread/event-loop, which in Servo seems to be more restrictive than in Chrome), they also describe attacks that use other 'event-loops/message pumps' running outside of the script event-loop.
This second type of attack could be relevant for Servo, because obviously we have a lot of those message pumps that perhaps could indeed be 'timed' from JS code executed in a script thread.
For example:

Constellation's run would qualify as such an event-loop, that indeed, because it handles messages from script, could perhaps be timed from JS code.
The embedder's loop. In fact, we've started sending messages directly from script to the embedder, bypassing the Constellation's loop(see #20707) (the embedder messages are forwarded via the constellation's loop).
Perhaps something like net's wait_for_response used in Fetch.

The threat model could look a bit like:

JS code doing something that results in a FromScriptMsg being handled by the constellation in some way that is noticeable and timeable by that same JS code.
Which would enable the JS code to find out other stuff going on in the constellation's handling of other messages, such as messages from other script-threads, whether isolated in their own process or not, and also messages from compositor, which includes keystrokes(so an attacker in a tab that is not focused, could for example guess the keystrokes meant for the tab that is by timing the iteration of the constellation's loop).

Worth being aware of, I guess...
