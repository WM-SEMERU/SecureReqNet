proposal: encoding/asn1: add "enum" keyword for TagEnum


Adding an "enum" tag option helps keeping the code clean.
for example:
the following code:
type tEnum int

const (
	tZero tEnum = iota
	tOne
)

type enumTest struct {
	A tEnum `asn1:"enum"`
}

func sampleTest(t *testing.T) {

	myTest := enumTest{A: tOne}

	buf, err := Marshal(myTest)
}

as compared to
type tEnum int

const (
	tZero tEnum = iota
	tOne
)

type enumTest struct {
	A tEnum
}
type enumStruct struct {
	A Enumerated
}

func sampleTest(t *testing.T) {

	myTest := enumTest{A: tOne}

	enum := enumStruct{A: Enumerated(int(myTest.A))}
	buf, err := Marshal(enum)
}

note the enumStruct is completely redundant and is used solely for getting an enum tag in the buffer
Same goes for Unmarshal, you need an intermediate structure if you want to have you own enumerated types.
