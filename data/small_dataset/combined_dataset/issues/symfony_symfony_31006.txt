[VarDumper] Stub has no unserializer


Symfony version(s) affected: 3.4.24 / 4.2.5
Description
Profiler broken after update to 3.4.24, see exception below:
Warning: Class Symfony\Component\VarDumper\Cloner\Stub has no unserializer

in vendor/symfony/symfony/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php at line 53
    public function unserialize($data)
    {
        $this->data = \is_array($data) ? $data : unserialize($data);
    }

From the logs:
CRITICAL - Uncaught PHP Exception Symfony\Component\Debug\Exception\ContextErrorException: "Warning: Class Symfony\Component\VarDumper\Cloner\Stub has no unserializer" at /var/www/app/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php line 53 

It appears this commit may have introduced the breaking change:
symfony/var-dumper@2159335#diff-d27846d05751e99b0c2098a902d8df42
I store my profiler data in MongoDB:
<?php

namespace Unicorn\AppBundle\Profiler;

use Symfony\Component\HttpKernel\Profiler\Profile;
use Symfony\Component\HttpKernel\Profiler\ProfilerStorageInterface;

class MongoDbProfilerStorage implements ProfilerStorageInterface
{
    /**
     * @var string
     */
    protected $dsn;

    /**
     * @var int
     */
    protected $lifetime;

    /**
     * @var \MongoCollection
     */
    private $mongo;

    /**
     * MongoDbProfilerStorage constructor.
     * @param string $dsn
     * @param string $username
     * @param string $password
     * @param int $lifetime
     */
    public function __construct(string $dsn, string $username = '', string $password = '', int $lifetime = 86400)
    {
        $this->dsn = $dsn;
        $this->lifetime = $lifetime;
    }

    /**
     * Finds profiler tokens for the given criteria.
     *
     * @param string $ip The IP
     * @param string $url The URL
     * @param string $limit The maximum number of tokens to return
     * @param string $method The request method
     * @param int|null $start The start date to search from
     * @param int|null $end The end date to search to
     *
     * @return array An array of tokens
     */
    public function find($ip, $url, $limit, $method, $start = null, $end = null)
    {
        $this->getMongo()->createIndex('time');

        $cursor = $this->getMongo()->find($this->buildQuery($ip, $url, $method, $start, $end), ['_id', 'parent', 'ip', 'method', 'url', 'time', 'status_code'])->sort(['time' => -1])->limit((int)$limit);

        $tokens = [];

        foreach ($cursor as $profile) {
            $tokens[] = $this->getData($profile);
        }

        return $tokens;
    }

    /**
     * Reads data associated with the given token.
     *
     * The method returns false if the token does not exist in the storage.
     *
     * @param string $token A token
     *
     * @return Profile The profile associated with token
     */
    public function read($token)
    {
        $profile = $this->getMongo()->findOne([
            '_id' => $token,
            'data' => [
                '$exists' => true
            ]
        ]);

        if (null !== $profile) {
            $profile = $this->createProfileFromData($this->getData($profile));
        }

        return $profile;
    }

    /**
     * Saves a Profile.
     *
     * @param Profile $profile A Profile instance
     *
     * @return bool Write operation successful
     */
    public function write(Profile $profile)
    {
        $this->cleanup();

        $record = [
            '_id' => $profile->getToken(),
            'parent' => $profile->getParentToken(),
            'data' => base64_encode(serialize($profile->getCollectors())),
            'ip' => $profile->getIp(),
            'method' => $profile->getMethod(),
            'url' => $profile->getUrl(),
            'time' => $profile->getTime(),
            'status_code' => $profile->getStatusCode(),
        ];

        $result = $this->getMongo()->update(['_id' => $profile->getToken()], array_filter($record, function ($v) { return !empty($v); }), ['upsert' => true]);

        return (bool) (isset($result['ok']) ? $result['ok'] : $result);
    }

    /**
     * Purges all data from the database.
     */
    public function purge()
    {
        $this->getMongo()->remove([]);
    }

    /**
     * @return \MongoCollection
     */
    protected function getMongo(): \MongoCollection
    {
        if ($this->mongo !== null) {
            return $this->mongo;
        }

        if (!$parsedDsn = $this->parseDsn($this->dsn)) {
            throw new \RuntimeException(sprintf('Please check your configuration. You are trying to use MongoDB with an invalid dsn "%s". The expected format is "mongodb://[user:pass@]host/database/collection"', $this->dsn));
        }

        list($server, $database, $collection) = $parsedDsn;

        $mongo = new \MongoClient($server);

        return $this->mongo = $mongo->selectCollection($database, $collection);
    }

    /**
     * @param array $data
     * @return Profile
     */
    protected function createProfileFromData(array $data): Profile
    {
        $profile = $this->getProfile($data);

        if ($data['parent']) {
            $parent = $this->getMongo()->findOne([
                '_id' => $data['parent'],
                'data' => [
                    '$exists' => true
                ]
            ]);

            if ($parent) {
                $profile->setParent($this->getProfile($this->getData($parent)));
            }
        }

        $profile->setChildren($this->readChildren($data['token']));

        return $profile;
    }

    /**
     * @param string $token
     * @return Profile[]
     */
    protected function readChildren(string $token): array
    {
        $profiles = [];

        $cursor = $this->getMongo()->find([
            'parent' => $token,
            'data' => [
                '$exists' => true
            ]
        ]);

        foreach ($cursor as $d) {
            $profiles[] = $this->getProfile($this->getData($d));
        }

        return $profiles;

    }

    /**
     * @return void
     */
    protected function cleanup(): void
    {
        $this->getMongo()->remove([
            'time' => [
                '$lt' => time() - $this->lifetime
            ]
        ]);
    }

    /**
     * @param string $ip
     * @param string $url
     * @param string $method
     * @param int $start
     * @param int $end
     * @return array
     */
    private function buildQuery($ip, $url, $method, $start, $end): array
    {
        $query = [];

        if (!empty($ip)) {
            $query['ip'] = $ip;
        }

        if (!empty($url)) {
            $query['url'] = $url;
        }

        if (!empty($method)) {
            $query['method'] = $method;
        }

        if (!empty($start) || !empty($end)) {
            $query['time'] = [];
        }

        if (!empty($start)) {
            $query['time']['$gte'] = $start;
        }

        if (!empty($end)) {
            $query['time']['$lte'] = $end;
        }

        return $query;
    }

    /**
     * @param array $data
     * @return array
     */
    private function getData(array $data): array
    {
        return [
            'token' => $data['_id'],
            'parent' => isset($data['parent']) ? $data['parent'] : null,
            'ip' => isset($data['ip']) ? $data['ip'] : null,
            'method' => isset($data['method']) ? $data['method'] : null,
            'url' => isset($data['url']) ? $data['url'] : null,
            'time' => isset($data['time']) ? $data['time'] : null,
            'data' => isset($data['data']) ? $data['data'] : null,
            'status_code' => isset($data['status_code']) ? $data['status_code'] : null,
        ];
    }

    /**
     * @param array $data
     * @return Profile
     */
    private function getProfile(array $data): Profile
    {
        $profile = new Profile($data['token']);
        $profile->setIp($data['ip']);
        $profile->setMethod($data['method']);
        $profile->setUrl($data['url']);
        $profile->setTime($data['time']);
        $profile->setCollectors(unserialize(base64_decode($data['data'])));

        return $profile;
    }

    /**
     * @param string $dsn
     * @return array|null
     */
    private function parseDsn(string $dsn): ?array
    {
        if (!preg_match('#^(mongodb://.*)/(.*)/(.*)$#', $dsn, $matches)) {
            return null;
        }

        $server = $matches[1];
        $database = $matches[2];
        $collection = $matches[3];

        preg_match('#^mongodb://(([^:]+):?(.*)(?=@))?@?([^/]*)(.*)$#', $server, $matchesServer);

        if ('' == $matchesServer[5] && '' != $matches[2]) {
            $server .= '/'.$matches[2];
        }

        return [$server, $database, $collection];
    }
}
parameters:
    profiler.storage.class: Unicorn\AppBundle\Profiler\MongoDbProfilerStorage

services:
    profiler.storage:
        class: "%profiler.storage.class%"
        arguments: ["mongodb://%mongodb_host%:%mongodb_port%/%mongodb_database%/profiler"]
I want to try to avoid going back to file storage. Is it possible to get Serializable back on Symfony\Component\VarDumper\Cloner\Stub?
