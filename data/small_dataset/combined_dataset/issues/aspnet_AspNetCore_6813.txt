Unclear source of truth / rules for ClaimsIssuer


ISSUE: I believe it is currently very difficult to understand the source of ClaimsIssuer in most RemoteAuthentication scenarios. Further, I believe that has significant security consequences, and deserves clarification, despite the lack of a quick fix or even a clear symptom.
I apologize for this non-standard and non-trivial defect presentation. I've been digging through Identity source code for many weeks now and feel it's an important issue. I will do my best to make my issue clear and concise, though it is not so in my head.
I see many places where ClaimsIssuer can be set, but it is not documented what the outcome is if multiple are set. Possible sources include:

AuthenticationHandler.ClaimsIssuer (it has no mandatory effect in derived classes, but does in OAuthHandler and descendants. it is coalesced from the following)

AuthenticationScheme.Name (which itself has multiple sources)
AuthenticationSchemeOptions.ClaimsIssuer


OAuthCreatingTicketContext.RunClaimActions (via a duplicate coalesce to that performed above)
ClaimsIdentity.DefaultIssuer (via TicketSerializer ReadWithDefault/WriteWithDefault logic that allows Issuer to automatically change between cluster hosts, which I don't understand and doesn't seem safe)
Claim CTORs without Issuer parameters and all consumers (such as SignInManager, although I'm unclear how this value matches ClaimsIdentity.DefaultIssuer; there must be a duplicate const in there)
ClaimAction.Run (and derivatives, however note that DeleteClaimAction does not respect this)

I feel like I've missed a couple constructors as well. Other OEM change points may exist, such as serialization and deserialization of claims, claims factory/transformer injected by default, etc. I couldn't find such, but the lack of clearly-stated pattern leads to my suspicion/confusion about this.
I think the most important near-term fix to this is a formal statement of the intended functionality (e.g. documentation). I think reducing the number of points of truth would also be helpful, given that ASP.NET Core consumers today are somewhat obligated to refer to source for functional comprehension.
