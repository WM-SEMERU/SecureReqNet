Make the _security session key prefix constant and add the concept of "persistent roles"


I need to login the current logged in user admin in the firewall admin_secured as user in the shop_secured firewall, keeping admin logged in in the admin area.
This is quite like the native "switch user" feature but firewalls are different and session should keep admin logged in both firewalls.
In order to do so, this is what I'm doing (controller code) under the  admin_secured firewall, and it works:
$targetFirewall = 'shop_secured';

$user  = new User('user', null, ['ROLE_USER']);
$roles = $user->getRoles();
$token = new UsernamePasswordToken($user, null, $targetFirewall, $roles);

$request->getSession()->set('_security'.$targetFirewall, serialize($token));

return $this->redirect($this->generateUrl('shop_account'));
// Then the ContextListener will read the token and refresh the user
// The the AccessListener will authenticate the token
// .. and user is logged in
Proposal 1: it would be nice if the hard-coded session key prefix _secured would be stored in a constant, say ContextListener::SECURITY_SESSION_KEY_PREFIX, as my application will continue to work even if the prefix changes.
My second proposal is about "persistent roles" (ok, maybe the name isn't really well suited). I'll try to explain. I need to add a special role in the above case, say ROLE_IMPERSONATING as the user admin is impersonating user in the shop_secured firewall:
// ...
$roles = $user->getRoles();
$roles[] = new ImpersonatingRole('ROLE_IMPERSONATING');
// ...
This is exactly what the happens in the SwitchUserListener.
Right now this is not working because of the UserAuthenticationProvider only checking for the SwitchUserRole.
I was able to manage it overriding the provider and using some reflection.
Proposal 2: make an interface i.e. PersistentRoleInterface and change the getRoles():
    private function getRoles(UserInterface $user, TokenInterface $token)
    {
        $roles = $user->getRoles();

        foreach ($token->getRoles() as $role) {
            if ($role instanceof PersistentRoleInterface) {
                $roles[] = $role;
            }
        }

        return $roles;
    }
