Many PVCs in an in an AWS account cause FailedAttachVolume due to RequestLimitExceeded error


What happened:
Experiencing FailedAttachVolume on pods often. I suspect this is because of RequestLimitExceeded and lack/ too aggressive backoff mechanizm. It usually resolves itself after a while.
E.g. events:
default     36m         Warning   FailedAttachVolume       Pod       AttachVolume.Attach failed for volume "pvc-a58ccd07-55dc-11e9-883f-02723aa22644" : Error attaching EBS volume "vol-063b02c0e1af1d7a9" to instance "i-01edf320d75677974": "RequestLimitExceeded: Request limit exceeded.\n\tstatus code: 503, request id: 34004134-ee5d-4b7a-a361-e53e82560666"

default   39m       Warning   FailedAttachVolume       Pod       Multi-Attach error for volume "pvc-a5b2eeb4-55dc-11e9-883f-02723aa22644" Volume is already exclusively attached to one node and can't be attached to another

default   39m       Warning   FailedAttachVolume       Pod       Multi-Attach error for volume "pvc-a5afbb90-55dc-11e9-883f-02723aa22644" Volume is already exclusively attached to one node and can't be attached to another

default   37m       Warning   FailedMount              Pod       Unable to mount volumes for pod "c001-jwt-forward-user-0_default(097435ac-55ea-11e9-883f-02723aa22644)": timeout expired waiting for volumes to attach or mount for pod "default"/"c001-jwt-forward-user-0". list of unmounted volumes=[data log]. list of unattached volumes=[data log data-init data-secret data-secret-add secret default-token-lvh7x]

default   36m       Warning   FailedAttachVolume       Pod       AttachVolume.Attach failed for volume "pvc-a5afbb90-55dc-11e9-883f-02723aa22644" : Error attaching EBS volume "vol-0799bd29b84edec21" to instance "i-0fffef306bdf0ce32": "RequestLimitExceeded: Request limit exceeded.\n\tstatus code: 503, request id: 3739cb94-236c-4206-a682-88660f2f3c25"

What you expected to happen:
Use proper backoffs to avoid RequestLimitExceeded errors while attaching EBS volumes.
How to reproduce it (as minimally and precisely as possible):
Difficult to say. We run 10 clusters in that account with more 400 PVCs.
Anything else we need to know?:
From https://docs.aws.amazon.com/en_us/AWSEC2/latest/APIReference/query-api-troubleshooting.html#api-request-rate

If an API request exceeds the API request rate for its category, the request returns the RequestLimitExceeded error code. To prevent this error, ensure that your application doesn't retry API requests at a high rate.

Environment:

Kubernetes version (use kubectl version):
Client Version: version.Info{Major:"1", Minor:"11", GitVersion:"v1.11.3", GitCommit:"a4529464e4629c21224b3d52edfe0ea91b072862", GitTreeState:"clean", BuildDate:"2018-09-09T18:02:47Z", GoVersion:"go1.10.3", Compiler:"gc", Platform:"darwin/amd64"}
Server Version: version.Info{Major:"1", Minor:"13", GitVersion:"v1.13.4", GitCommit:"c27b913fddd1a6c480c229191a087698aa92f0b1", GitTreeState:"clean", BuildDate:"2019-02-28T13:30:26Z", GoVersion:"go1.11.5", Compiler:"gc", Platform:"linux/amd64"}
Cloud provider or hardware configuration:
AWS
OS (e.g: cat /etc/os-release):
NAME="Container Linux by CoreOS"
ID=coreos
VERSION=2023.4.0
VERSION_ID=2023.4.0
BUILD_ID=2019-02-26-0032
PRETTY_NAME="Container Linux by CoreOS 2023.4.0 (Rhyolite)"
ANSI_COLOR="38;5;75"
HOME_URL="https://coreos.com/"
BUG_REPORT_URL="https://issues.coreos.com"
COREOS_BOARD="amd64-usr"
Kernel (e.g. uname -a):
Linux ip-10-1-6-14.eu-central-1.compute.internal 4.19.23-coreos-r1 #1 SMP Mon Feb 25 23:40:01 -00 2019 x86_64 Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz GenuineIntel GNU/Linux
Install tools: Giant Swarm
Others:

