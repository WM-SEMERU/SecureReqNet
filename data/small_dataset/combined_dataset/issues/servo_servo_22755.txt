WebVR/XR security


Our security checks for WebVR/XR are done by passing a pipeline id in with each message, for example 


servo/components/script/dom/vrdisplay.rs


        Lines 218 to 225
      in
      43e21dc






 self.webvr_thread() 



     .send(WebVRMsg::GetFrameData( 



 self.global().pipeline_id(), 



 self.DisplayId(), 



 self.depth_near.get(), 



 self.depth_far.get(), 



         sender, 



     )) 





This id is then checked to make sure it's the same pipeline that is presenting on the relevant display 


servo/components/webvr/webvr_thread.rs


        Lines 181 to 195
      in
      43e21dc






 // This method implements the privacy and security guidelines defined in the WebVR spec. 



 // For example a secondary tab is not allowed to read VRDisplay data or stop a VR presentation 



 // while the user is having a VR experience in the current tab. 



 // These security rules also avoid multithreading race conditions between WebVRThread and 



 // Webrender thread. See WebVRCompositorHandler implementation notes for more details about this. 



 fn access_check( 



 &self, 



     pipeline: PipelineId, 



     display_id: u32, 



 ) -> Result<&VRDisplayPtr, &'static str> { 



 if *self.presenting.get(&display_id).unwrap_or(&pipeline) != pipeline { 



 return Err( 



 "No access granted to this Display because it's presenting on other JavaScript Tab", 



         ); 



     } 





It's not obvious that we're passing the right pipeline id though, we're currently using the pipeline id for the relevant global of the VRDisplay object, rather than the incumbent global.
I filed a spec issue for this: immersive-web/webxr#497
