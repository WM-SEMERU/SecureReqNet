runtime: Windows DLL preloading attack possible for winmm.dll


Go 1.11 seems vulnerable to dll preloading on windows with winmm.dll. It looks like #14959 mostly fixed this, kernel32.dll etc are protected, but winmm.dll still seems to be affected. It seems to be loaded implicitly by the go runtime — 


go/src/pkg/runtime/thread_windows.c


         Line 31
      in
      6174b5e






 #pragma dynimport runtime·timeBeginPeriod timeBeginPeriod "winmm.dll" 




 — but I notice is not listed with the other safely loaded DLLs — 


go/src/pkg/syscall/zsyscall_windows_amd64.go


        Lines 9 to 19
      in
      6174b5e






 modkernel32 = NewLazyDLL("kernel32.dll") 



 modadvapi32 = NewLazyDLL("advapi32.dll") 



 modshell32  = NewLazyDLL("shell32.dll") 



 modmswsock  = NewLazyDLL("mswsock.dll") 



 modcrypt32  = NewLazyDLL("crypt32.dll") 



 modws2_32   = NewLazyDLL("ws2_32.dll") 



 moddnsapi   = NewLazyDLL("dnsapi.dll") 



 modiphlpapi = NewLazyDLL("iphlpapi.dll") 



 modsecur32  = NewLazyDLL("secur32.dll") 



 modnetapi32 = NewLazyDLL("netapi32.dll") 



 moduserenv  = NewLazyDLL("userenv.dll") 





What version of Go are you using (go version)?
$ docker run --rm golang:1.11 go version
go version go1.11.2 linux/amd64

Does this issue reproduce with the latest release?
Yes
What operating system and processor architecture are you using (go env)?
go env Output$ docker run --rm golang:1.11 go env
GOARCH="amd64"
GOBIN=""
GOCACHE="/root/.cache/go-build"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/go"
GOPROXY=""
GORACE=""
GOROOT="/usr/local/go"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD=""
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build782466443=/tmp/go-build -gno-record-gcc-switches"

What did you do?


Create a main.go with:
package main

import "fmt"

func main() {
	fmt.Println("Hello world")
}



Cross-compile for windows:
docker run -v $PWD:/go -e GOARCH=amd64 -e GOOS=windows --rm golang:1.11 go build -o test.exe main.go



Copy test.exe to a windows vm


Add a winmm.dll beside test.exe with contents not a dll


Double click test.exe


What did you expect to see?
"Hello world"
What did you see instead?

