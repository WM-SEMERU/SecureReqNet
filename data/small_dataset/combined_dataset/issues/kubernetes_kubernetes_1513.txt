Real container ssh


Forking ssh off of #386.
To debug a containerized application, currently, a user can ssh to the host and then use nsenter/nsinit or docker exec to enter the container, or they could run their own sshd inside their containers or pods, which we'd like them to not need to do. For non-interactive commands they could use kubelet's RunInContainer API, but there will be cases where the user wants an interactive shell or debugging session. For that, we should facilitate ssh directly into a container.
I don't think we'd implement ssh support exactly the same way, but geard implements a neat trick in order to support ssh directly to a container. I looked into how it did this a few months ago.
geard will generate ssh keys for containers upon request, and put them into /var/lib/containers/keys.
In addition to the keys themselves, geard injects its namespace entering command:
command=\"/usr/bin/switchns\"
switchns finds the container with the same name as the "user" and starts bash in the container using the equivalent of docker exec.
/etc/ssh/sshd_config needs to be changed to add a geard-specific key lookup command:
AuthorizedKeysCommand /usr/sbin/gear-auth-keys-command

This enables you to do:
ssh ctr-mycontainer@myvm

This mechanism was intended for lookup of users and their keys in remote services, such as LDAP.
Relevant assumptions for our solution:

It should look like standard ssh as much as possible, as per the proposal in #386
I assume we'll be supporting user namespaces at some point.
IP per pod
Potentially multiple containers within the pod

The problem with ssh <user-within-namespace>@<IP-of-pod> is that the pod could have multiple containers.
I haven't done enough investigation to make a proposal as yet, but I wanted to record this feature request.
/cc @smarterclayton @erictune
