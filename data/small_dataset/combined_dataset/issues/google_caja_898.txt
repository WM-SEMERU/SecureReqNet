Caja violates block scoping of named functions


Original issue 898 created by erights on 2008-11-03T19:51:38.000Z:
var a = [];
for (var i = 0; i < 3; i++) {
function f(){return g;}
function g(){return f;}
a.push(f);
a.push(g);
}
a0 === a[1];
ES3 technically disallows named function declarations from appearing in
nested blocks, like above. However, all major browsers accept it, so all
must. Uncajoled, the last expression above will return either true or false
today, depending on the browser.
ES3.1 sought to give this an agreed meaning, but had to back off mostly
because we ran out of time. ES-Harmony will spec this to do proper
block-level letrec-like lexical scoping, in which case the last expression
above must return true.
In Cajita and Valija today, the last expression above always returns false,
independent of browser. This is because

We hoist the variable representing the function name to the enclosing body.
We hoist the initialization of this variable to the beginning of the
enclosing block.
A nested function captures the variables in scope, not their values.

