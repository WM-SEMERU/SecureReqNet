cmd/8g: inlined method wrapper's temporary corrupts return address on stack


by The.One.Ring03:
What steps will reproduce the problem?
http://play.golang.org/p/qKEBokzvAO
http://play.golang.org/p/XPNFKHSWJZ

What is the expected output?
amd64, arm: runs as expected, no panic
386: expected output is the same as the other two platforms. Instead, runtime panic
happens.

What do you see instead?
Runtime panic complaining about nil pointer dereference and call of nil func value.
There is also no stacktrace, and when gdb is prompted with the backtrace command, it
says "corrupt stack?".

Which compiler are you using (5g, 6g, 8g, gccgo)?
8g

Which operating system are you using?
linux

Which version are you using?  (run 'go version')
$ go version
go version go1.1 linux/386

Golang-nuts thread:
https://groups.google.com/forum/?fromgroups#!topic/golang-nuts/-2WtAR3ve-A

Some interesting debug output, with the same code as included above:
https://gist.github.com/paperwing/5604265

In particular, this gdb session sample is interesting:

Breakpoint 1, main.main ()
    at ./uniqc.go:71
71      rs := runeSlice(a.a)
(gdb) n
73      sort.Sort(rs)
(gdb) p rs
# Note: that "gostringsize+99" was something different
# in a previous run, something like "AsserT" or similar
# (a function name?). I can't reproduce it anymore,
# most likely because I restarted the pc in the meantime.
$1 = {array = 0x8064083 <gostringsize+99>, len = 80, cap = 405037056}
