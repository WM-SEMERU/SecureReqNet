ES5/3 property virtualization is unsound


Original issue 1667 created by kpreid.switchb.org on 2013-02-28T22:19:26.000Z:
There is an accessor defined for the toString property, which appears to be applying a wrapper to protect the given function from implicit invocations. However, it is not protected from non-assignment property definition:
var o = {toString: 0};
or
Object.defineProperty(o, 'toString', {value: 0});
Is this a security issue? Whether or not it is, the rationale for the accessor should be documented inline so the answer to that question is evident.
A related problem: assigning toString does not cause the object to hasOwnProperty:
var o = {};
o.toString = function(){};
alert(Object.prototype.hasOwnProperty.call(o, 'toString'));  // false
