Create a marker type that indicates that a compartment has been entered


#22982 is an example of crashes that can occur if we use certain JS APIs without entering a compartment. This can often be challenging to notice because the JS engine will enter compartments for us automatically when content code invokes DOM APIs (like when a script has let promise = some_element.requestFullScreen();). That means that when the the Element::RequestFullScreen method is invoked from JS, the promise can be created safely without entering a compartment. However, if any Rust code invokes this same method without passing through the JS engine first, we can crash. I propose we introduce the following to help:
pub struct AlreadyInCompartment(());
impl AlreadyInCompartment {
    pub fn assert(global: &GlobalScope) -> AlreadyInCompartment {
        unsafe {
            assert!(!GetCurrentRealmOrNull(global.cx()).is_null());
        }
        AlreadyInCompartment
    }
}

pub enum InCompartment<'a> {
    Already(&'a AlreadyInCompartment),
    Entered(&'a AutoCompartment),
}

impl<'a> InCompartment<'a> {
    pub fn in_compartment<'a>(token: &'a AlreadyInCompartment) -> InCompartment<'a> {
        InCompartment::Already(token)
    }

    pub fn entered<'a>(token: &'a AutoCompartment) -> InCompartment<'a> {
        InCompartment::Entered(token)
    }
}
Then we can start adding &InCompartment arguments to APIs like Promise::new_with_current_compartment, which will force callers to prove that they have entered a compartent and allow us to remove the unsafety from that API. This can propagate outwards, adding these arguments to more and more callers to make all of our bindings more safe. Eventually we can modify the DOM bindings code generation to create an AlreadyInCompartment value and pass it to the Rust method that gets called.
