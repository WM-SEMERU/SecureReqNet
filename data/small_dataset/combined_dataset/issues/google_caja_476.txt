After Cajoling, statically check that there are no free variables in global function


Original issue 476 created by google@web.dwdw.me on 2008-06-10T22:13:53.000Z:
The following is intended to be an invariant of the output of the Cajoler:
the body of the anonymous function passed to .loadModule() supposedly
has no free variables (it refers only to its two arguments, namely, ___ and
IMPORTS, but does not refer to any other names).
This would be a good property to check.  Some ideas to consider:


After Cajoling, take the String output and re-parse it using your
Javascript parser and statically check that it appears to have no free
variables.


Do the same as 1), but with an independent Javascript parser (or a
collection of Javascript parsers).


Record the output of everything that's ever Cajoled, so that you can
later do after-the-fact analysis with a suite of Javascript parsers along
the lines of 2).  This differs from 2) only in that it can be done long
after the initial Cajoling.


Try to recognize any use of free variables dynamically, rather than
statically, to whatever extent you are able to.  For instance, on browsers
where you can set a nosuch-method on an object (which gets called whether
you try to call a non-existent method on that object), create an object to
be inserted into the scope chain just above this function with no defined
methods and set a nosuch-method which detects any unexpected method
invocations and logs them to Google (sends them over http to Google) and
terminates the Caja script.  I'm not sure whether this is workable; could
think about whether there are any clever tricks you could do here.


The idea is that this would not be a primary security mechanism but rather
a fallback/defense-in-depth mechanism.
If you include these checks into the Cajoler, then they will automatically
get applied to all fuzz tests.  If they're not included into the Cajoler,
then apply them during fuzz testing.
Also, think about whether there is any even better way to check this
property during fuzz testing (during fuzz testing, you control the
environment and the interpreter so may be able to take extra steps to check
that this property holds which wouldn't be feasible for all deployed
Cajoled code).
