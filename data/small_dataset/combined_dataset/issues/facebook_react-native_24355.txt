Discussion: ScrollView cannot be scrolling as a TouchableX subview.


when I add ScrollView on TouchableOpacity or TouchableWithoutFeedback as a subview, the ScrollView cannot be scrolling.
I have dig out the implementation of RCTScrollView blow:
/**
 * Returning `YES` cancels touches for the "inner" `view` and causes a scroll.
 * Returning `NO` causes touches to be directed to that inner view and prevents
 * the scroll view from scrolling.
 *
 * `YES` -> Allows scrolling.
 * `NO` -> Doesn't allow scrolling.
 *
 * By default this returns NO for all views that are UIControls and YES for
 * everything else. What that does is allows scroll views to scroll even when a
 * touch started inside of a `UIControl` (`UIButton` etc). For React scroll
 * views, we want the default to be the same behavior as `UIControl`s so we
 * return `YES` by default. But there's one case where we want to block the
 * scrolling no matter what: When JS believes it has its own responder lock on
 * a view that is *above* the scroll view in the hierarchy. So we abuse this
 * `touchesShouldCancelInContentView` API in order to stop the scroll view from
 * scrolling in this case.
 *
 * We are not aware of *any* other solution to the problem because alternative
 * approaches require that we disable the scrollview *before* touches begin or
 * move. This approach (`touchesShouldCancelInContentView`) works even if the
 * JS responder is set after touches start/move because
 * `touchesShouldCancelInContentView` is called as soon as the scroll view has
 * been touched and dragged *just* far enough to decide to begin the "drag"
 * movement of the scroll interaction. Returning `NO`, will cause the drag
 * operation to fail.
 *
 * `touchesShouldCancelInContentView` will stop the *initialization* of a
 * scroll pan gesture and most of the time this is sufficient. On rare
 * occasion, the scroll gesture would have already initialized right before JS
 * notifies native of the JS responder being set. In order to recover from that
 * timing issue we have a fallback that kills any ongoing pan gesture that
 * occurs when native is notified of a JS responder.
 *
 * Note: Explicitly returning `YES`, instead of relying on the default fixes
 * (at least) one bug where if you have a UIControl inside a UIScrollView and
 * tap on the UIControl and then start dragging (to scroll), it won't scroll.
 * Chat with @andras for more details.
 *
 * In order to have this called, you must have delaysContentTouches set to NO
 * (which is the not the `UIKit` default).
 */
- (BOOL)touchesShouldCancelInContentView:(__unused UIView *)view
{
  BOOL shouldDisableScrollInteraction = [self _shouldDisableScrollInteraction];
  
  if (shouldDisableScrollInteraction == NO) {
    [super touchesShouldCancelInContentView:view];
  }
  
  return !shouldDisableScrollInteraction;
}

/**
 * @return Whether or not the scroll view interaction should be blocked because
 * JS was found to be the responder.
 */
- (BOOL)_shouldDisableScrollInteraction
{
  // Since this may be called on every pan, we need to make sure to only climb
  // the hierarchy on rare occasions.
  UIView *JSResponder = [RCTUIManager JSResponder];
  if (JSResponder && JSResponder != self.superview) {
    BOOL superviewHasResponder = [self isDescendantOfView:JSResponder];
    return superviewHasResponder;
  }
  return NO;
}

As the comment in first section, if JS responder is a scroll view subview we should block the scroll view likes UIScrollView handling UIControl by default.
But why we tries to find a JSResponder in scroll view superview in _shouldDisableScrollInteraction method? on my comprehension, I think we should try to find JS Responder in scroll view subviews likes subviewHasResponder?
As above code implementation, scroll view on TouchableX view (JS responder) would case touchesShouldCancelInContentView return NO which case touch event not be cancel by scroll view and delivered to it subview. The fact is scroll view will not scroll.
As we know, UIScrollView can scroll on UIButton in Native iOS.
Blow is my code snip:
import React from 'react';
import { StyleSheet, Text, View, ScrollView, TouchableOpacity} from 'react-native';

export default class App extends React.Component {
  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.touchable}>
            <ScrollView style={styles.scrollView}>
                <View style={styles.content}></View>
            </ScrollView>
        </TouchableOpacity>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  touchable: {
    flex: 1,
    margin: 16,
    backgroundColor: 'green',
  },
  scrollView: {
    margin: 16,
    backgroundColor: 'red'
  },
  content: {
    flex: 1,
    height: 3000,
    backgroundColor: 'yellow',
  },
});

Hope I have expressed opinions by my poor English...
React Native version: 0.57
