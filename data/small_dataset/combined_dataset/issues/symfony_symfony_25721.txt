[Security] Removes Doctrine user provider assumption that an invalid User can't be handled at all





Q
A




Branch?
2.7


Bug fix?
yes


New feature?
no


BC breaks?
no


Deprecations?
no


Tests pass?
yes


Fixed tickets
none


License
MIT


Doc PR
none



Since Symfony 2.0, if the Doctrine Bridge EntityUserProvider detects a user without a valid ID, it throws an \InvalidArgumentException, which is not caught by the Firewall ContextListener when iterating over all available user providers.  This assumes that an environment cannot be configured to handle such a case with a secondary firewall authenticator.
By throwing and subsequently catching a Symfony namespaced exception instead, the firewall handling can be customized with an additional user provider that throws a UsernameNotFoundException instead of an UnsupportedUserException.  The authentication then fails gracefully, allowing a secondary authenticator to make an attempt.
The real world scenario for this is where we have an API firewall that handles direct REST requests and AJAX requests from authenticated sessions (using the jQuery $.ajax() option xhrFields: { withCredentials: true }).  Without this change, the first AJAX request after authenticating in a browser fails on the \InvalidArgumentException.  With this change, our custom API user provider can throw a UsernameNotFoundException (since it is allowed to try), and our simple_preauth authenticator is then allowed to find the user (identifying data stored in a cookie).
I'm not sure if there's even an argument for calling this double authentication approach "unusual" as opposed to "unorthodox".  Our alternative is to refactor our front end to make stateless REST requests or perhaps add a controller layer with a separate route / firewall scheme that passes the logic handling to the API controllers.  I thought it worth submitting this at least as a conversation starter.
