Race condition on set_File_Data_Json method


As mentioned on https://twitter.com/TimelessP/status/751564300876148736 the current version of set_File_Data_Json could be vulnerable to a race condition

A interesting question is if node's sync nature is be a good protection here (as it tends to be for multi-thread code)

We need a test to really understand what is the worse case scenario (note that the data files are stored in git, which will provide a good integrity and history defence)
Related to #26
UPDATE: here is the test. I was not able to trigger the race condition, so this is going to be flagged as fixed (i.e. not-exploitable)
  it.only 'Issue 121 - Race condition on set_File_Data_Json method', (done)->
    # results:
    #   when count is 10   -> takes 106 ms       (80 ms    with no logging)
    #   when count is 100  -> takes 740 ms       (541 ms   with no logging)
    #   when count is 1000 -> takes 6,878 ms     (5,387 ms with no logging)
    using new Data_Files(), ->
      count         = 10                                                                  # number of attempts to do
      project       = 'bsimm'                                                             # target project
      team          = "save-test"                                                         # target team
      default_Value = 'will-be': 'changed by tests'                                       # default value of file_Data
      value_To_Skip = 9                                                                   # skip one to make sure logic is working

      save_File = (index, next)=>
        if index is value_To_Skip                                                         # skip this one
          #console.log "[skip ] #{index}"
          return next()
        #console.log "[start] #{index}"                                                    # log start

        10.random().wait =>                                                               # small random delay to force proper async
          file_Data = @.get_File_Data(project,team)                                       # get data
          (file_Data[index] is undefined).assert_Is_True()                                # confirm value is not set already
          file_Data[index] = index                                                        # set test value
          @.set_File_Data_Json(project,team, file_Data.json_Str()).assert_Is_True()       # save it
          @.get_File_Data(project,team).assert_Is file_Data                               # confirm save happened ok
          #console.log "[end  ] #{index}"                                                  # log end

          next()

      values = [0..count]                                                                 # async array

      async.each values, save_File, =>                                                    # async call
        file_Data = @.get_File_Data(project,team)                                         # get data (after last async execution
        for index in values                                                               # check that all values are in there
          if index is value_To_Skip                                                       # except this one
            (file_Data[index] is undefined).assert_Is_True()
          else
            file_Data[index].assert_Is index
        @.set_File_Data_Json(project,team, default_Value.json_Str()).assert_Is_True()     # restore file to default value
        done()
