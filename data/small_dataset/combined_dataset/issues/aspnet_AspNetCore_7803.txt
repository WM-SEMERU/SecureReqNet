OpenID with IdentityServer4 - Using MetadataAddress vs. Authority


Hi guys,
I am working on a project where we would like to use IdentityServer4 as a token server and have other services authenticated within this token server. I have dev env on Windows using Docker and linux containers. Basically what I have now is a docker based project with microservices structure. I configured IdentityServer - tried it, it's working. However, when I configured MVC client to authenticate, it's failing to access token server through docker. OK, I realized that Docker works in a way of having external/internal ports, so I configured mvc client this way
services.AddAuthentication(options =>
            {
                options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = "oidc"; 
            })
            .AddCookie(options =>
            {
                options.ExpireTimeSpan = TimeSpan.FromHours(2);
                options.Cookie.Name = "adminmvc";
            })
            .AddOpenIdConnect("oidc", options =>
            {
                var mvcOptions = new MvcAuthenticationOptions();
                var section = Configuration.GetSection(nameof(MvcAuthenticationOptions));
                section.Bind(mvcOptions);

                options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                options.Authority ="http://localhost:5011" ;
                options.SignedOutRedirectUri = mvcOptions.CallbackUrl;
                options.MetadataAddress = mvcOptions.IdentityUrl;
                options.ClientId = "adminmvc";
                options.ClientSecret = "secret";
                options.ResponseType = "code id_token";
                options.SaveTokens = true;
                options.GetClaimsFromUserInfoEndpoint = true;
                options.RequireHttpsMetadata = false;

                options.Scope.Clear();
                options.Scope.Add("openid");
                options.Scope.Add("profile");  

                options.TokenValidationParameters = new TokenValidationParameters
                {
                    NameClaimType = JwtClaimTypes.Name,
                    RoleClaimType = JwtClaimTypes.Role
                };
            });

where in docker-compose I have this:
- MvcAuthenticationOptions__IdentityUrl=http://identity.api
so I'm referencing container dns name directly. This part is working, because document discovery is working. However it'll fail to access http://identity.api url, because it's internal container address, not external accessible through web browser. So I tried to set 2 different urls: MetadataAddress from which document from OPenID server should be fetched and Authority, where all Unauthorized requests are redirected. However when I set both MetadataAddress and Authority in OpenIdConnectOptions when calling AddOpenIdConnect, it'll use MetadataAddress instead of Authority. I checked logs, discovery of document is successfull, because I'm hitting http://identity.api/.well-known......, but it's also initiating request to the IdentityServer to authenticate with the same url http://identity.api/connect.....
Here is my configuration:
docker-compose.yml
version: '3.7'

services:
  postgres:
    image: postgres
    environment: 
      - POSTGRES_PASSWORD=Blue!Bird!2013
    ports:
      - "5432:5432"

  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "15672:15672"
      - "5672:5672"

  gateway:
    image: ${DOCKER_HOST}gateway
    build:
      context: .
      dockerfile: Source/Gateway/Visma.Gateway.Api/Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
    depends_on: 
      - identity.api
    links:
      - identity.api
    ports:
      - "5010:80"
    volumes:
      - ./Source/Gateway/Visma.Gateway.Api/Configuration:${VISMA_OCELOT_VOLUME_SPEC:-/App/configuration}

  identity.api:
    image: ${DOCKER_HOST}identity.api
    build:
      context: .
      dockerfile: Source/Services/Identity/Visma.Identity.Api/Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - IdentityServerOptions__IssuerUri=http://identity.api
    depends_on: 
      - postgres
    ports:
      - "5011:80"

  admin.mvc:
    image: ${DOCKER_HOST}admin.mvc
    build: 
      context: .
      dockerfile: Source/WebApps/Admin/Visma.Admin.Mvc/Dockerfile
    restart: always
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MvcAuthenticationOptions__IdentityUrl=http://identity.api
    depends_on: 
      - gateway
      - identity.api
    links:
      - gateway
      - identity.api
    ports:
      - "5020:80"

IdentityServer configuration
var options = new IdentityServerOptions();
            var dbOptions = new DatabaseOptions();
            var section = configuration.GetSection(nameof(IdentityServerOptions));
            var dbSection = configuration.GetSection(nameof(DatabaseOptions));
            section.Bind(options);
            dbSection.Bind(dbOptions);

            return services.AddIdentityServer(x =>
            {
                x.IssuerUri = options.IssuerUri;
                x.Authentication.CookieLifetime = TimeSpan.FromMinutes(options.CookieLifeTimeInMinutes);
            })
            .AddSigningCredential(certificate)
            .AddAspNetIdentity<TUser>()
            .AddCorsPolicyService<InMemoryCorsPolicyService>()
            .AddConfigurationStore(opts =>
            {
                opts.ConfigureDbContext = dbOptions.Provider == DatabaseProviders.MSSQL ? ConfigureMicrosoftSqlServer(dbOptions) : ConfigurePostgreSqlServer(dbOptions);
            })
            .AddOperationalStore(opts =>
            {
                opts.ConfigureDbContext = dbOptions.Provider == DatabaseProviders.MSSQL ? ConfigureMicrosoftSqlServer(dbOptions) : ConfigurePostgreSqlServer(dbOptions);
            });

