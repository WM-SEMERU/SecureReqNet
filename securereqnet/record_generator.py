# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/09_record_generator.ipynb (unless otherwise specified).

__all__ = ['Record_Generator']

# Cell
import tensorflow as tf
import numpy as np
from .preprocessing import vectorize_sentences

class Record_Generator:
    """Formats data for securereqnet models. Returns TFRecords.
    Call Record_Generator(True) if the data is already in the shape [x,618,100,1]"""

    def __init__(self, path = ".", name = "Record", processed=False):
        self.__processed = processed
        self.__path = path
        self.__name = name
        self.__count = 0


    def __float_feature(self,value):
        return tf.train.Feature(float_list=tf.train.FloatList(value=value))

    def __int64_feature(self,value):
        return tf.train.Feature(int64_list=tf.train.Int64List(value=value))

    def generate_record(self,x,y = None,path="",name="Record",processed=False):
        """
        Writes a single TFRecord.
        @param x, by default a string to be processed. Can also be data processed using WHATEVER SECUREREQNET PREPROCESSING IS CALLED
        @param y is used for generating training and evaluation data.
        @param path is the directory where the record will be written to.
        @param name is the name of the record to be generated.
        @param processed should be set to true if the data is vectorized in the shape [1,618,100,1]
        """

        if path == "":
            path = self.__path
        # Name the record Record_1 Record_2 etc.
        self.__count+=1

        output_filename = path + "/" +  name + "_" + str(self.__count) + ".tfrecord"
        print("Generating record at: " + output_filename)

        if processed == False:
            x = vectorize_sentences([x])
        # Reshape data into 1d array
        x = np.reshape(x, [1*618*100*1,])

        if(y is not None):
            y = np.reshape(y, [1*2,])


        # Define dictionary for the record
        feature_dict = {
        'x': self.__float_feature(x),
        'numberOfSamples': self.__int64_feature([1])
        }

        # If it is used for training or testing include a y value in the dictionary
        if(y is not None):
            feature_dict["y"] = self.__int64_feature(y)

        writer = tf.io.TFRecordWriter(output_filename)

        example = tf.train.Example(features=tf.train.Features(feature=feature_dict))

        writer.write(example.SerializeToString())
        writer.close()
