Improve strings sent to AMSI


AMSI plays a vital role in Powershell's security but it is found lacking when simple obfuscation techniques are employed. This is a "bug" in Powershell since it does not report the actual command being executed.
As an example, look at the following command:
[Ref].Assembly.GetType(('{0}{1}{2}'-f'System.Management .Aut','omation.A','msiUtils')).GetField(('{0}{1}{2}'-f'am','siIn','itFailed'),('{0}{1}{2}'-f'NonPu','blic,S','tatic')).SetValue($null,$true)
It is minimally obfuscated version of Matt Graeber's "AMSI bypass in a single tweet". Using AMSI with Windows Defender blocks the Matt's original command but fails to detect the obfuscated version.
In my point of view, the responsibility for blocking such a bypass is on the endpoint security product, not on Powershell itself. Having said that, Powershell's responsibility is to accurately report through AMSI the exact command being executed and this is the "bug" I ask to address. On the example above, Powershell sends the obfuscated command to AMSI (which causes Windows Defender to miss the malicious content).
The reason for this behavior is the point in time where ScanContent is being called - right before compilation of a ScriptBlock. This location has a few disadvantages:

Commands resulting in execution of native app (through NativeCommandProcessor) can be missed.
Calls for C# Cmdlet can be missed (Cmdlets running through CommandProcessor).
Calls to functions with obfuscated parameters can be missed (when parameters are bound by the compiler).
There might be a few other cases - I didn't have time to go through all code paths.

Solving (1) and (2) is easy:
(1) Add calls for ScanContent at NativeCommandProcessor.InitNativeProcess() before creating a Process object (two locations).
(2) Add call for ScanContent at either CommandProcessor.ProcessRecord or at Cmdlet.DoProcessRecord (by that time the parameters are known.
The hard issue is (3) and requires some more thought on how to address the issue. My POC changed the behavior of Language.PSInvokeMemberBinder.InvokeMethod() to add Expression.Call() to a function that receives the MethodBase and parameters and calls ScanContent before calling Expression.Call that was supposed to be called. While this solution works well it is not complete as there are some other methods that invoke methods dynamically.
A POC with implementation can be found at:
https://github.com/OmerYa/Babel-Shellfish
A talk on the subject from DerbyCon 2018:
http://www.irongeek.com/i.php?page=videos/derbycon8/track-3-15-goodbye-obfuscation-hello-invisi-shell-hiding-your-powershell-script-in-plain-sight-omer-yair
I'll try to send pull request for the mentioned changes on the following days.
