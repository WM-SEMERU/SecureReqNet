proposal: Go 2: specify default value in named return signature


Background
Currently go has the following syntax for named returns:
func MyFunc(x int) (result int) {
   ...
}

Proposal
I would like to propose that we add syntax for specifying the default value in the named return:
func MyFunc(x int) (result int = 42) {
    ...
}

Essentially, this proposal is for syntactic sugar in place of a var defaultValue ReturnType = value, which I believe will allow for some code cleanliness.
Use Case
The proposed signature would make the function equivalent to the current implementation, but replacing the zero-value at compile-time.
func MyFunc(x int) int {
    if ... { // some guard clause
        return 42
    }
    if ... { // another guard clause
        return 42
    }
    ...

    if ... { // yet another guard clause
        return 42
    }
}

There are other useful cases as well, such as returning the input arguments by default.
// MyFunc .... needless to say, if some condition is not met, the result is the same as the input.
func MyFunc(x int) (result int = x) {

}

Interfacing
The named returned should not affect its function signature, ie. the following functions are all signature-equivalent
func MyFunc(x int) (result int = 4) {}
func MyFunc1(x int) (result int) {}
func MyFunc2(x int) int {}

Also, the equality for interface values should follow the standard go syntax
type InterfaceA interface {
  Do()
}

type SomeValue struct {}
func (s *SomeValue) Do() {}

func DoSomething(x int) (result InterfaceA = &SomeValue{value: 123}) {
    ...
}

Comments
I believe that having a default value specified at compile-time is a useful construct, and saves 1 operation of declaring a default result value, like so:
func MyFunc(x int) int {
    defaultValue := 42
    // use it in all guard clauses
}

Of course this can already be done by duplicating them inline during the return statement, such as this example:
func MyFunc2(x int) *MyType {
    if ... {
        return &MyType{Value: 42}
    }
    if ... {
        return &MyType{Value: 42}
    }
    if ... {
        return &MyType{Value: 42}
    }
    if ... {
        return &MyType{Value: 42}
    }

    ....
}

but it seems that it would look a lot cleaner like this:
func MyFunc2(x int) (result *MyType = &MyType{Value: 42}) {
    if ... {
        return
    }
    if ... {
        return
    }
    if ... {
        return
    }
    if ... {
        return
    }

    ....
}

