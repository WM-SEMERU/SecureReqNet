[2.0][Doctrine-Bridge][Security] EntityUserProvider and EntityManager


Hi,
Why does the EntityUserProvider uses a fixed EntityManager, the first default one ? This EntityManager may be closed by some operations prior to the authentication process (with a cancelled transaction for example). This may result in an EntityUserProvider that provides some entities during authentication that are not managed with the latest opened EntityManager.
Let's give you a simple example:
In a Symfony command, we have :
class MyCommand extends ContainerAwareCommand{
    function execute($input,$output){
        $container=$this->getContainer;
        $doctrineRegistry=$container->get('doctrine');

        try{
            $doctrineRegistry->getEntityManager()->transactional(
                function($entityManager){
                    //...

                    throw SomeException('because something went wrong');
                }
            );
        }catch(\Exception $e){
            //the transaction failed, but it's not a
            //fatal error, the execute method may continue
            //so we just need to reset the entity manager.
            $doctrineRegistry->resetEntityManager();
        }

        $request=Request::create('someURI','GET',$someParametersIncludingCredentials);
        $kernel=$container->get('kernel');

        //when the kernel handles the request, it will authenticate
        //the user using EntityUserProvider which uses an old closed
        //EntityManager.
        $response=$kernel->handle($request);

        //This results in
        //$container->get('security.context')->getToken()->getUser()
        //not being managed by $doctrineRegistry->getEntityManager();
    }
}
Will you consider that fixing EntityUserProvider to use a Doctrine Registry instead of an EntityManager that may be closed is a good idea? Or should $container->get('security.context')->getToken()->getUser() be always tested on our own, to check that it points to a managed entity, and merge it or refetch it if not?
