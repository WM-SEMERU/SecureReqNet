cmd/go: [modules + gopath] replace fails for subpackage - please save our beloved GOPATH


What version of Go are you using (go version)?
$ go version 1.12.2


Does this issue reproduce with the latest release?
I guess this is the latest release, afaik, humbly :)
What operating system and processor architecture are you using (go env)?
go env OutputGOARCH="amd64"
GOOS="linux"

What did you do?
in GOPATH/src
- mypackage
  main.go
  - subpackage
    subcode.go
- hlog
  hlog.go

Using GOPATH I was importing hlog in main.go and subcode.go
import (
    "hlog"
)

I started to convert to modules and run go mod init in mypackage and hlog,  setting GO111MODULE=on for the future.
I edited go.mod in mypackage to show this for hlog:
require (
	git.private.home/Dumper/hlog v0.0.0
)

replace git.private.home/Dumper/hlog => ../hlog

What did you expect to see?
Would like to see mypackage compile.
What did you see instead?
subpackage/subcode.go:12:2: unknown import path "hlog": cannot find module providing package hlog
It seems that the information in the go.mod does not spread into subpackages, although go.mod nicely lists all dependencies, even the ones from subpackages.
Additional discussion
I am actually unhappy with the main feature of the GOPATH being eyed for chopping: the fact that you can refer to all local packages in src using a short import path. I think this is a really important feature to actually be able to build many projects. I dont even want to start writing down all the problems using url mapped importpaths for everything outside the current module scope. Just this one:
Imagine I would turn hlog into a url mapped import. If I need to make a change to this - because my team is responsible for it - I would start with forking it in our git repository and then what?

Refer to it with a path that contains my username?
Pull the dependency from the master repo and then checkout my fork, do my changes, push, pull request, wait for the changes to be merged, update the dependency, compile my code? Come on, that cannot be the your idea.

I would vote for a GO111MODULE=both: Imports are searched for in the GOPATH/src and in the modules cache. If imports can be found in GOPATH, they are excluded from module dependency management.
If I miss something and there is an article out there explaining why modules cannot be created in the GOPATH, please point me to it. I googled a lot, but no luck.
