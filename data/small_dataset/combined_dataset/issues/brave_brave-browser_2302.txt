Mitigate clipboard abuse & paste-jacking attacks


There is a class of malicious behavior built around putting unexpected content in the clipboard buffer. Generally, these attacks fall into a few categories. What they have in common is the fact that someone's expectations are subverted, and their computer acts in an unexpected way apparently out of sync with their instructions.
Mandatory citation/marketing
In the least dangerous (but still annoying) variant, "viral"/"shareable" material is added to the clipboard buffer. You might select a sentence in an article, but the publication's name and URL are appended to the paste-buffer. Or you attempt to copy a link and your copied link has an unique token or redirect added to it to trace sharing.
Steganography/tagging
The text appears to be ordinary sentences or paragraphs*, but Unicode homoglyphs, complex whitespace, or zero-width characters, are used to uniquely mark the copied text. If pasted without recognition or conversion, the attacker can determine which unique source or visitor the paste came from.
Paste-jacking
Innocuous terminal commands are presented, with the expectation that they'll be copied and run, perhaps with elevated privileges. The text placed in the clipboard buffer doesn't match what's appears to be on screen, and runs malicious commands when pasted into a terminal.

Replacing copied terminal commands with malicious code, WITHOUT abuse of “special characters”. https://www.reddit.com/r/netsec/comments/1bv359/dont_copypaste_from_website_to_terminal_demo/
“Backspace” variant https://security.stackexchange.com/questions/39118/how-can-i-protect-myself-from-this-kind-of-clipboard-abuse
Pastejacking: https://github.com/dxa4481/Pastejacking & http://saynotolinux.com/tests/pastejacking/test.html

Possible Mitigations

We might be able to re-purpose the some techniques we use for homoglyph protection in domains and URIs.
We could pro-actively sanitize complex whitespace unicode strings into simple space characters
We could use computer-vision to detect material differences between the paste buffer and the text on screen right after a copy event
We might also consider some of these attacks out of scope if they're easier to sensibly implement in the application receiving the paste event.


*Some variants of this are out of scope for the browser. For instance, a source which actually paraphrases the content for different readers will not be practical to remediate. And steganographic tagging of images, PDFs, and other rich files can get pretty complex pretty fast.
