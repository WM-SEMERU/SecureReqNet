bypassSecurityTrustHtml behaves different than sanitize(SecurityContext.HTML, value)


I'm submitting a...

[ ] Regression (a behavior that used to work and stopped working in a new release)
[x] Bug report
[ ] Performance issue
[ ] Feature request
[ ] Documentation issue or request
[ ] Other... Please describe:

Current behavior
The bypassSecurityTrustHtml function works as expected:
import { Component, Pipe, PipeTransform, SecurityContext, OnInit } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser'

@Pipe({ name: 'safeHtml'})
export class SafeHtmlPipe implements PipeTransform  {
  constructor(private sanitized: DomSanitizer) {}
  transform(value: string) {
    console.log(this.sanitized.bypassSecurityTrustHtml(value));
    return this.sanitized.bypassSecurityTrustHtml(value);
  }
}

@Component({
  selector: 'app-demo',
  template: `
    <div [innerHtml]="html | safeHtml">
    </div>
  `
})

export class DemoComponent {
  html: string;
  constructor(private sanitizer: DomSanitizer) {
    this.html = "<svg onload=\"alert(1)\"> blah </svg>"
  }
}

Expected behavior
This might not be a bug, but I would have expected that .sanitize(SecurityContext.HTML, value) works equally well:
import { Component, Pipe, PipeTransform, SecurityContext, OnInit } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser'

@Pipe({ name: 'safeHtml'})
export class SafeHtmlPipe implements PipeTransform  {
  constructor(private sanitized: DomSanitizer) {}
  transform(value: string) {
    return this.sanitized.sanitize(SecurityContext.HTML, value);
  }
}

or this:
@Component({
  selector: 'app-demo',
  template: `
    <div [innerHtml]="tmpl"></div>
  `
})

export class DemoComponent {
  tmpl: string;
  constructor(private sanitizer: DomSanitizer) {
    this.tmpl = sanitizer.sanitize(SecurityContext.HTML, "<svg onload=\"alert(2)\"> blah </svg>");
  }
}

Minimal reproduction of the problem with instructions
https://stackblitz.com/edit/angular-61vsgc
What is the motivation / use case for changing the behavior?
Evaluating how bad programming practices will actually lead to security issues in Angular.
Environment

Angular version: 5.2.5 / 6.0.0

Browser:
- [x] Chromium (RHEL) Version 65.0.3325.181 (Developer Build) Fedora Project (64-bit)
- [x] Firefox Windows version 59.0.2 (32-bit)
 
For Tooling issues:
- Node version: 6.0.1
- Platform:  Linux, Windows 


