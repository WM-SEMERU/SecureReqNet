Cannot use constructor dependency injection on autowired / lazy command


Symfony version(s) affected: 3.4.22
Description
I would like to use dependency injection of services (logger, entityManager, etc.) via the constructor of some of my commands. The problem is when I declare a constructor (with or without including the name argument), the command is no longer automatically auto-registered in the container. I expect that because I'm using auto-wiring, the container will both detect the commands and pass the appropriate service definitions to their constructors, without having to manually register the commands. It seems I must either define each command manually or have to make their dependencies public, as using the container to get to them within the ContainerAwareCommand throws an error about private services.
I believe having to define each command kind of defeats the purpose of auto-wiring and is a step back from symfony 2.x where commands were auto-registered and we were allowed to pull services directly from the container.
How to reproduce
services.yml
services:
  _defaults:
    autowire: true
    autoconfigure: true
    public: false

  AppBundle\:
    resource: '../../../../../../src/AppBundle/*,../../../../../../src/AppBundle/Form/Type/*'
    exclude: '../../../../../../src/AppBundle/{DTO,Entity,Form,Listener,Logging,Repository,Resources,Tests,Util}'

VersioningCommand.php
namespace AppBundle\Command;
class VersioningCommand extends Command {
	protected static $defaultName = 'app:version';
	protected $logger;
	protected $em;

	public function __construct(LoggerInterface $logger, EntityManagerInterface $entityManager) {
		$this->logger = $logger;
		$this->em = $entityManager;
		parent::__construct();
	}

	protected function configure()
	{
		$this
			->setName('app:version')
			->setDescription('Rebuilds the asset version mapping class')
			->addOption('test', 't', InputOption::VALUE_NONE, 'Controls whether any operations will be persisted or simply tested as in a dry-run')
		;
	}

	protected function execute(InputInterface $input, OutputInterface $output)
	{
		$this->logger->notice("Starting ".$this->getName()."(".$this->getDescription().")...");
		// ...
		$this->logger->notice($this->getName()." complete");
	}

}

Possible Solution
?
Additional context
Error after overriding constructor and adding dependencies as arguments:
ERROR.console: (6924) Error thrown while running command "app:version -e dev". Message: "Command "app:version" is not defined." {"exception":"[object] (Symfony\\Component\\Console\\Exception\\CommandNotFoundException(code: 0): Command \"app:version\" is not defined. at .../Symfony/vendor/symfony/symfony/src/Symfony/Component/Console/Application.php:618)","command":"app:version -e dev","message":"Command \"app:version\" is not defined."} {"path":"bin/console app:version -e dev"}
Error after reverting to default constructor and retreiving dependencies from container:
ERROR.console: (9785) Error thrown while running command "app:version -e dev". Message: "The "app.service.system_info" service or alias has been removed or inlined when the container was compiled. You should either make it public, or stop using the container directly and use dependency injection instead." {"exception":"[object] (Symfony\\Component\\DependencyInjection\\Exception\\ServiceNotFoundException(code: 0): The \"app.service.system_info\" service or alias has been removed or inlined when the container was compiled. You should either make it public, or stop using the container directly and use dependency injection instead. at .../Symfony/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php:337)","command":"app:version -e dev","message":"The \"app.service.system_info\" service or alias has been removed or inlined when the container was compiled. You should either make it public, or stop using the container directly and use dependency injection instead."} {"path":"bin/console app:version -e dev"}
