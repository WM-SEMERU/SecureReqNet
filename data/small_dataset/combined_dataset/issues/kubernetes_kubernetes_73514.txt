encryption provider "aescbc" is vulnerable to a padding oracle attack and should be deprecated


While working with Kubernetes v1.13.2 and examining the way encrypted secrets are stored in etcd I noticed that the recommended encryption provider “aescbc” is susceptible to a padding oracle attack. While the attack is not really feasible and there are probably attacks that are much easier to execute it is nonetheless a security vulnerability and I think it would be a good idea not to recommend an encryption method that has this vulnerability, so others will not perceive it as recommended by Kubernetes.
The encryption provider “aescbc” uses the AES encryption algorithm in CBC mode with PKCS#7 padding to store the encrypted data. Because it does not use an integrity check this combination is susceptible to a padding oracle attack. A padding oracle makes it possible to retrieve the clear text of the encrypted data without knowing the key and without even knowing the encryption algorithm. It takes advantage of the fact that the attacker is able to control the encrypted data and that the encrypted data are used in CBC mode to prepare the next cipher block for decryption. It only works when the software that manages the data replies with an “invalid padding” error when the padding is wrong and no error when the padding is correct. This is the way how Kubernetes’ provider works.
The source file aes.go contains the following lines of code in the function (t *cbc) TransformFromStorage:
for i := 0; i < paddingSize; i++ { 
   if result[size+i] != c { 
      return nil, false, errInvalidPKCS7Padding 
   } 
}
I.e, there is an error message that distinguishes a padding error from other errors.
An attacker could now do the following:


Find out where the data resides in etcd’s database. This is easy as the data is prefixed by the string k8s:enc:aescbc. This, in turn is prefixed by the length of the following data, which has the following format: k8s:enc:aescbc:v1:[keyName]:[InitializationVector:8Bytes][EncryptedData].


The attacker now shuts down the API server, changes the last byte of the next-to-last block of  [EncryptedData] to [LastByteOfNext-to-lastBlock] XOR [GuessedClearByteOfLastByteOfLastBlock] XOR  0x01.


Then he starts the API server, waits until the secret is accessed and watches the log file for the padding error message.


If there is a padding error message the guess was wrong and he starts step 2 again with the next guessed clear byte


If there was no padding error message the guessed clear byte was correct and step 2 is started again this time with the guessed next to last byte of the last block and so on working backwards to the first byte of the block and then the same through the other blocks.
An attacker would have to repeat this procedure on the average ([PasswordLength] + 12 + 4) * 128 times. For an 8 character secret that yields 3.072 times on the average and 6.144 times at the maximum. Stopping and starting the API server several thousand times in a row is quite cumbersome and probably sure to attract attention, so this is not quite a feasible attack. Also, if the attacker is able to manipulate the bytes of etcd’s database he will probably also be able to read the encryption configuration data with the keys directly. But, nonetheless it is a possible attack.
The main reason why I want to bring this to your attention is that Kubernetes is a role model for other programmers and if you use this vulnerable encryption method, others will follow. So, in order to strengthen security as a whole I would be glad if you would deprecate the use of “aescbc” and instead use one of the following alternatives:



Use secretbox or aesgcm. They are much more secure than aescbc and not susceptible to a padding oracle attack
Add integrity checking to aescbc by adding a HMAC in encrypt-then-MAC-mode to aescbc so that there will never be a padding error as the manipulation of bytes would then generate an error before padding is checked.
Use Arbitrary Tail Byte padding or no padding at all with a length prefix.
Use AES in counter mode and not CBC.

I.e. use any other combination than CBC and PKCS#7 padding, as this combination is really badly insecure.
As I said, this attack is not really feasible and there are much easier ways to compromise the server when one has already access to etcd's storage. I just think that Kubernetes should not endorse an algorithm combination that is essentially broken.
