'**Summary:** 

I accidentally found it while reviewing a Merge Request I just imported from Github. This vulnerability allows arbitrary execution of JavaScript for any user visiting the link to the Merge Request. The proof of concept reproduce the step I happen to see it the first time. I didn't test if the issue also affect non-imported repository and non-vuejs files.

**Description:**

The proof of concept execute arbitrary Javascript included in a Vuejs file (*.vue) with a comment left, so the comment context get rendered on the merge request summary page.

## Steps To Reproduce:

(Add details for how we can reproduce the issue)

  1. Create a new project on Github
  2. Create a new branch
  3. Create a file named `test.vue` in the new branch :

```
<template>
  <div id="test">
    <div>
      <script>alert(0)</script>
      <img onerror="alert(1)" src="http://foo.bar/biz" />
      <h2 onmouseover="alert(2)">Test</h2>
    </div>
  </div>


</template>

<script>
</script>

<style>
</style>
```

  4. Open a Pull Request
  5. Leave a comment on the line with the `<h2>` tag
  6. Import the project in Gitlab
  7. Go the the Merge Request
  8. You should see an `alert(1)`

## Supporting Material/References:

  * The repository on Github: https://github.com/isra17/xss-test
  * The merge request of the imported repository on Gitlab: https://gitlab.com/israel.halle/xss-test/merge_requests/1 (Private, ask for access if needed)

## Impact

Usual XSS impact:

 * Few step away from stealing session
 * Can execute request from the user context

The XSS is execute on the main gitlab domain and only require the attach to be able to import project (gitlab.com vulnerable) and the attack simply require a victim to visit an unsuspicious link to a merge request.

Timeline:
2018-08-30 21:32:39 +0000: @isra17 (comment)
Here's a screen recording showing the proof of concept in action.

---

2018-09-05 00:04:34 +0000: @asaba (user assigned to bug [team-only])

**Verification by GitLab Security Team**

Both the `alert(1)` fires as well as the `alert(2)`, since none of the incoming content appears to be sanitized.

Security Issue: https://dev.gitlab.org/gitlab/gitlabhq/issues/2701