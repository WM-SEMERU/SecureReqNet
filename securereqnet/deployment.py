# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/10_deployment.ipynb (unless otherwise specified).

__all__ = ['create_app', 'serve']

# Cell
import flask
from flask import Flask
import requests
import json
from flask import request, jsonify
from tempfile import mkdtemp
import os.path as path
from .preprocessing import vectorize_sentences
import numpy as np
import waitress

# Internal Cell
# takes a list of sentences, vectorizes them and sends the result to the uri of the TFX serving endpoint
def __get_predictions(sentences, endpoint_uri):
    payload = {
            "instances": vectorize_sentences(sentences).tolist()
        }

    r = requests.post(endpoint_uri, json = payload)
    model_preds = json.loads(r.content.decode('utf-8'))


    preds = []

    # decode predictions
    for pred in model_preds['predictions']:
        preds.append(__decode(pred))

    output = {
        "predictions": preds
    }

    return output




# Internal Cell
# takes a list of sentences and sends them to the uri of the TFX serving endpoint
def __get_gamma_predictions(sentences, endpoint_uri):
    payload = {
            "instances": sentences.tolist()
        }

    r = requests.post(endpoint_uri, json = payload)
    model_preds = json.loads(r.content.decode('utf-8'))


    preds = []

    # decode predictions
    for pred in model_preds['predictions']:
        # May need to add decoding
        preds.append(pred)

    output = {
        "predictions": preds
    }

    return output

# Internal Cell
# decodes the tensor output from the TFX endpoint to True/False values
def __decode(input):
    return float(input[0])>float(input[1])

# Cell

def create_app(test_config=None):
    """
    Returns a Flask web application with the default configuration pinging a TFX serving instance
    on http://localhost:8503/v1/models/alpha:predict
    """
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_mapping(
        TFX_ENDPOINT='http://localhost:8503/v1/models/alpha:predict'
    )

    if test_config:
        app.config.from_mapping(test_config)

    # default route, we probably will get rid of this
    @app.route('/', methods=['GET'])
    def home():
        return '<h1>SecureReqNet</h1><p>Flask backend</p>'

    # alpha model
    @app.route('/models/alpha', methods=['POST'])
    def alpha():
        content = request.get_json()
        sentences = content['instances']
        return __get_predictions(sentences, app.config['TFX_ENDPOINT'])

    # gamma model
    @app.route('/models/gamma', methods=['POST'])
    def gamma():
        content = request.get_json()
        sentences = content['instances']
        return __get_gamma_predictions(sentences, app.config['TFX_ENDPOINT'])

    return app




# Cell

def serve(host, port):
    """
    Serves a waitress production server on the given host and post
    """
    waitress.serve(create_app(), host = host, port = port)