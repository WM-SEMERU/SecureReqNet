scheduler: performance improvement on PodAffinity


What type of PR is this?
/kind design
/sig scheduling
/assign @bsalamat
What this PR does / why we need it:
This PR tries to eliminate unnecessary Lock/Unlock in the logic of InterPodAffinity priorities. By replacing them with atomic AddInt64 can significantly improve the performance of:


Hard PodAffinity (55% performance improvement, see below)


Before
BenchmarkSchedulingPodAffinity/5000Nodes/1000Pods-8               1000         284,892,826 ns/op
BenchmarkSchedulingPodAffinity/5000Nodes/1000Pods-8               1000         285,320,757 ns/op
BenchmarkSchedulingPodAffinity/5000Nodes/1000Pods-8               1000         287,498,053 ns/op



After (with this PR)
BenchmarkSchedulingPodAffinity/5000Nodes/1000Pods-8               1000         127,001,991 ns/op
BenchmarkSchedulingPodAffinity/5000Nodes/1000Pods-8               1000         129,263,078 ns/op
BenchmarkSchedulingPodAffinity/5000Nodes/1000Pods-8               1000         125,813,803 ns/op





Soft PodAffinity/PodAntiAffinity (Can be inferred from the code and benchmark result of Hard PodAffinity. We can add the benchmark tests if necessary)


Which issue(s) this PR fixes:
Special notes for your reviewer:
Above test result is run at a Baremetal machine with 8 core cpus and 32GB memory.
Does this PR introduce a user-facing change?:
NONE

