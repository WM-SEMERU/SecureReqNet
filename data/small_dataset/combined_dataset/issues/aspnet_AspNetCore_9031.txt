SignalR Java client: Timed out waiting for the server to respond to the handshake message


After this fix #8429, I am encountering another possible error. Because android has strict networking limitations when app goes to background, and cause I also want to save resources, I am starting hubconnection in onResume() callback of the activity, and stopping it in onPause() callback. Also, I am receiving data for showing map locations and I only need hubConnection open while user is visually interacting with the app (more precisely, with activity for showing locations on map).  So I call start and stop like this:
hubConnection.start().subscribeOn(Schedulers.io())
        .subscribe(()->Log.d(TAG, "start: " + "Success"),
                         error -> Log.d(TAG, "start: " + error.toString()))

hubConnection.stop().subscribeOn(Schedulers.io())
        .subscribe(()->Log.d(TAG, "stop: " + "Success"),
                         error -> Log.d(TAG, "stop: " + error.toString()))

But, that way I can call start, and if I press home button fast enough, onPause() callback is called and with it hubConnection.stop, but hubConnection is not yet connected so stop won't be executed. That way app is in background but hubConnection is open instead stopped. So I change my start and stop calls like this
try {
     hubConnection.start()
            .subscribeOn(Schedulers.single())
            .doOnComplete(() -> {
                 if (hubConnection.getConnectionState() == HubConnectionState.CONNECTED) {
                     Log.d(TAG, "start: " + "Success");
                }})
            .blockingAwait();
            } catch (Exception e){
                Log.d(TAG, "start error " + e.toString());
            }

try {
     hubConnection.stop()
            .subscribeOn(Schedulers.single())
            .doOnComplete(() -> {
                 if (hubConnection.getConnectionState() == HubConnectionState.DISCONNECTED) {
                    Log.d(TAG, "stop: " + "Success");
                     }})
             .blockingAwait();
            } catch (Exception e){
                Log.d(TAG, "stop error " + e.toString());
            }

That way I force sequential execution on shared thread between hubConnection start and stop in blocking manner so I don't have problem of failing to stop connection. But in both implementations, after several times of fast calling hubConnection.start and hubConnection.stop (going away from the app and resuming fast), I am getting this error on hubConnection.start:

java.lang.RuntimeException: java.util.concurrent.TimeoutException: Timed out waiting for the server to respond to the handshake message.

After I hit that error, I am still connected to hub, and receiving messages from backend. Next call to hubConnection.start will be successful, and immediately I will receive onClosed callback with folowing error:

java.lang.RuntimeException: Expected a name but was END_OBJECT at line 1 column 3 path $

Every time I call hubConnection.start after will result in that last onClosed error with the Error in the Logcat that is constantly showing, one after another:

E/HubConnection: Failed to bind arguments received in invocation 'null' of 'echo'.
java.lang.NullPointerException: Attempt to invoke interface method 'java.util.List com.microsoft.signalr.InvocationBinder.getParameterTypes(java.lang.String)' on a null object reference
at com.microsoft.signalr.JsonHubProtocol.parseMessages(JsonHubProtocol.java:90)
at com.microsoft.signalr.HubConnection.lambda$new$0(HubConnection.java:175)
at com.microsoft.signalr.-$$Lambda$HubConnection$G63yw6AUTkfrLLvuFIXyM3tmsU4.invoke(Unknown Source:2)
at com.microsoft.signalr.WebSocketTransport.onReceive(WebSocketTransport.java:76)
at com.microsoft.signalr.WebSocketTransport.lambda$start$0(WebSocketTransport.java:53)
at com.microsoft.signalr.-$$Lambda$WebSocketTransport$fNWE7JNd0a-15XX5_c3rxHw-FEs.invoke(Unknown Source:2)
at com.microsoft.signalr.OkHttpWebSocketWrapper$SignalRWebSocketListener.onMessage(OkHttpWebSocketWrapper.java:84)
at okhttp3.internal.ws.RealWebSocket.onReadMessage(RealWebSocket.java:322)
at okhttp3.internal.ws.WebSocketReader.readMessageFrame(WebSocketReader.java:219)
at okhttp3.internal.ws.WebSocketReader.processNextFrame(WebSocketReader.java:105)
at okhttp3.internal.ws.RealWebSocket.loopReader(RealWebSocket.java:273)
at okhttp3.internal.ws.RealWebSocket$2.onResponse(RealWebSocket.java:213)
at okhttp3.RealCall$AsyncCall.execute(RealCall.java:153)
at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:636)
at java.lang.Thread.run(Thread.java:764)

So, am I doing something wrong, and is it my responsibility to handle queuing hubConnection calls in order to prevent that handshake timeout, or is that your responsibility?
