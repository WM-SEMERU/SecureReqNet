handleUncaughtException is broken for non-DOM guests


Original issue 1942 created by tim@xemware.com on 2014-10-20T19:55:53.000Z:
What revision of the cajoler exhibits the problem?  On what browser and OS?

Mac OS X
R5702
Chrome 38
Firefox 34

Was working fine in r5687 on all browsers (Chrome 37 and below)
What steps will reproduce the problem?

Pass in tamed object api and run
Reference any tamed object in script
Caja throws error such as "Cannot read property 'log' of undefined" for the example below
gman.domicile in ses-single-frame.js is undefined and browser throws undefined error - line 26993, r5702

Q.when(promise, function (compiledFunc) {
var result = undefined;
try {
result = compiledFunc(imports);
} catch (e) {
gman.domicile.handleUncaughtException(e, gman.getUrl());  <---- gman.domicile undefined - line 26993
}
if (opt_runDone) {
opt_runDone(result);
}
}, function (failure) {
config.console.log('Failed to load guest content: ' + failure);
});
//// EXAMPLE CODE
        load: function (container, contentPath, contentType, content, api, uriPolicy)
        {

            var consoleService = {
                log: function ()
                {
                    console.log.apply(console, arguments);
                }
            };

            caja.markReadOnlyRecord(consoleService);  
            caja.markFunction(consoleService.log);
            var tamedConsoleService = caja.tame(consoleService);

            var defer = $q.defer();
            setTimeout(doLoad, 0);
            return defer.promise;

            function doLoad()
            {
                caja.load(undefined, undefined, function (frame)
                {
                    defer.notify(frame);
                    var _api = { console: tamedConsoleService};
                    frame.code('/dummy.js',
                            contentType || 'application/javascript', 'console.log(&quot;1234&quot;)' )
                        .api(_api)
                        .run(function ()
                        {
                            defer.resolve();
                        }, function (err)
                        {
                            defer.reject(err);
                        });
                });
            }
        }

