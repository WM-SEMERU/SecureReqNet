Find a simpler replacement for our current encrypted api-key fields


Porting https://github.com/EnTeQuAk/m2secret (originally forked from Andy and originally written back in 2009) to https://github.com/pyca/cryptography/ kinda revealed that our currently used system for api-keys is a little bit over-engineered for it's use-case and also revealed how old and not up-to-date cryptographicaly m2secret is (sha1+hmac, no constant time compares, it's generally a bit more complex at some places than it should be). All that is fixable but that takes a lot of work and needs careful reviews and I honestly don't like us to maintain cryptographic code if we don't have to.
As far as I understood we are encrypting the API keys so that there's another layer of security in case a security-hole like a SQL injection happens and the attacker gets all or some of our users api-keys which wouldn't be immediately be useful to him and we have another layer to invalid them all by changing our server-side secret key.
Potential proposals:

Use a system like https://docs.djangoproject.com/en/1.10/topics/signing/ or http://pythonhosted.org/itsdangerous/ (which would need to be updated to not use sha1 but that's another topic) to have hashed and signed api-tokens
Use scrypt or bcrypt to hash the tokens together with our secret-key to add some pepper to the mix

Whatever we use will need to have better or similar security features (easy to expire / block keys and accounts, safe against sql injection and other attacks, etc) and at best should be good maintained and a generally accepted solution to avoid brewing our own stuff when there's no need for it.
cc @kumar303 (initial api-key implementation) and @jvehent (security) to the discussion and for potential input
As far as I can see it this isn't really a ticking timebomb since the algorithms we use aren't up-to-date but are not yet known as insecure. Also, we need a system that takes old api-tokens into account and allows silent upgrades to a potential new system.
