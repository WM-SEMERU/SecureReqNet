Comparing Users Manually with EquatableInterface


Symfony version(s) affected: 4.2.3
Description
Documentation for user providers in section "Understanding how Users are Refreshed from the Session"  says:

At the end of every request (unless your firewall is stateless), your User object is serialized to the session. At the beginning of the next request, it's deserialized and then passed to your user provider to "refresh" it (e.g. Doctrine queries for a fresh user).
Then, the two User objects (the original from the session and the refreshed User object) are "compared" to see if they are "equal".

And then in next section:

Or, if you need more control over the "compare users" process, make your User class implement EquatableInterface. Then, your isEqualTo() method will be called when comparing users.

However,
However the UserInterface $user passed to isEqualTo() comes not from seriallized entity stored in session but from already refreshed entity from database. Thus it's always equal to User from database against which I'm trying to compare saved in session one, which clearly contradicts documentation.
I was initially trying to force log out already logged in user on certain conditions:

If administrator has disabled it's account
If user roles changed (I would prefer just update, but there are only hacks for now as described here: ##12025)

How to reproduce

Create a simple security configuration with entity user provider and a few roles stored in User entity
Implement EquatableInterface with your User
Log in
Change a role for example
dd($this->user, $user) in public function isEqualTo(UserInterface $user)
They would be equal since both are loaded from database.

