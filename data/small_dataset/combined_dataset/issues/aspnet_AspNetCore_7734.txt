Consider adding Code + PKCE support in the OpenID Connect handler


Traditional code flow in OAuth 2 has the code substitution problem (https://tools.ietf.org/id/draft-ietf-oauth-security-topics-06.html#rfc.section.3.5). This was one of the motivations to create the OIDC hybrid flow (aka code id_token), where the id_token contains the hash of the code (aka detached signature) to protect against this attack. The downside of this approach is, that an id_token must be sent over the front channel.
PKCE (Proof Key for Code Exchange) solves the same problem in a different and simpler way. The spec (https://tools.ietf.org/html/rfc7636) reads like this is only useful for native client applications, but it turned out it is useful in many more cases.
The advantages of using PKCE are:

can go back to code response type which means no id_token must be sent over the front-channel which eliminates privacy concerns (e.g. leaking the subject id over the browser)
since there is no id_token on the front channel, no JWT validation must be done
since the id_token comes over the HTTPS  back-channel only, JWT validation is optional
the client implementation is considerably simpler

You might have followed the latest discussions around OIDC/OAuth security considerations and also the SPA guidance. There is a movement to simplify the process around selecting the right flows - basically it boils down to

use client credentials for non-interactive server to server
use code + PKCE for the rest

It is not hard to add this feature today - I created a POC here:
https://github.com/leastprivilege/AspNetCoreSecuritySamples/tree/aspnetcore21/OidcCodePkce
especially
https://github.com/leastprivilege/AspNetCoreSecuritySamples/blob/aspnetcore21/OidcCodePkce/src/AspNetCoreSecurity/Startup.cs#L77-L118
Something to consider for 3.0
