[Messenger] Message informations for handling


Description
Allow to specifying a "message name" which define the type of message that can be handled.
Example
Simple use-case where my main message can be extended:
<?php 

use App\Messenger\MessageInterface;

class RandomMessage implements MessageInterface
{
    protected $name = 'test'

    // getter
}
The RandomMessage children:
<?php 

class NewRandomMessage extends RandomMessage
{
    protected $name = 'newTest'

    // getter
}
Now the handler:
<?php

use App\Messenger\MessageInterface;
use Symfony\Component\Messenger\Handler\MessageHandlerInterface;

class RandomHandler implements MessageHandlerInterface
{
    public static function getHandledMessage(): string
    {
        return 'newTest';
    }

    public function __invoke(MessageInterface $message): void 
    {
        /** $message NewRandomMessage */
        if ($message->getName() !== static::getHandledMessage()) {
            return;
        }
    }
}
This method (the name should be improved but for me, that's like the EventSusbscriberInterface one) can ease the process when a message can be extended, once handled, the message keep the same type in the Handler but the developer can indicate that only this type of message can be handled, this allow to use switch in the same handler in order to keep a small amount of handlers.
The MessageInterface::getName() is just for demonstration purpose (it can be a constant or anything else that can be called).
Thanks for the feedback.
EDIT: Example for a new interface
Here's the new interface that can be added in order to allow this approach:
<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\Messenger\Handler;

interface MessageListenerInterface extends MessageHandlerInterface
{
    /**
     * Returns the name of the message to be handled.
     *
     * It returns a string which contain the name of the message:
     *
     *     return Message::NAME;
     *
     * Or:
     *
     *     return 'test';
     *
     * The `__invoke` method of the handler can use a defined interface.
     */
    public static function getHandledMessage(): string;
}
