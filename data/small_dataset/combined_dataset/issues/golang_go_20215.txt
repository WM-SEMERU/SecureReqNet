crypto/elliptic: different ecdsa.Verify result between p256 amd64 and generic implementations with a zero hash


What version of Go are you using (go version)?
tip
What operating system and processor architecture are you using (go env)?
GOARCH=386 and GOARCH=amd64
What did you do?
Code pulled from golang-nuts post https://groups.google.com/forum/#!topic/golang-nuts/M7tXCf8a4pk
$ GOARCH=386 go build -o cr32 && ./cr32
2017/05/02 21:10:00 Verification succeded
$ go build -o cr64 && ./cr64
2017/05/02 21:10:00 Failed

What did you expect to see?
I assume the verification should have failed in both cases.
What did you see instead?
Verification passed for the 32 bit binary.
Cause
The difference is in the path taken in ecdsa.Verify:
	var x, y *big.Int
	if opt, ok := c.(combinedMult); ok {
		x, y = opt.CombinedMult(pub.X, pub.Y, u1.Bytes(), u2.Bytes())
	} else {
		x1, y1 := c.ScalarBaseMult(u1.Bytes())
		x2, y2 := c.ScalarMult(pub.X, pub.Y, u2.Bytes())
		x, y = c.Add(x1, y1, x2, y2)
	}

The S390 and AMD64 versions of CombinedMult appear to always set the Z value to 1 regardless of X and Y.
(*curveParams).Add calls zForAffine which returns a Z value of 0 if X or Y are zero.
Modifying zForAffine to match the behavior of the optimized CombinedMults (Z=1 in all cases) causes TestInfinity to fail, but otherwise the generic and optimized CombinedMults give the same output for this  case.
