[Security] Potential fatal error when reloading a user from the session


In the AbstractToken class, the default behaviour is that it will reload the user from a serialised copy that has been saved to $_SESSION.
There is a potential issue when it gets to the hasUserChanged method, as the unserialised object might not be as 'complete' as the original. This is following this change 2d64dfc that was added to 2.3.9.
Since cloning only performs a "shallow copy" of the object, if the information required to the object to be able to respond to the methods required by the UserInterface and AdvancedUserInterface, there could be a scenario where the object is unserialised without its dependencies and causes a fatal error on AbstractToken::hasUserChanged.
The solution is very simple, it just requires the developer to implement the magic method __clone on the class that is implementing the UserInterface or the AdvancedUserInterface, and make sure that all the dependencies required to respond to these methods are available when the object is unserialised.
I would suggest that hasUserInterface adds a check for this, and to throws an Exception instead to avoid the fatal error.
Illustration to explain the scenario needed to recreate the issue:
class User implements UserInterface
{
    protected $userData;

    public function __construct(Userdata $userData)
    {
        $this->userData = $userData;
    }

    public function getUsername()
    {
        return $this->userData->getUsername();
    }
}

class Userdata 
{
    protected $username;

    ...

    public function getUsername()
    {
        return $this->username;
    }
}

This example illustrates the concept that if the username is held in a different entity (which may involve Doctrine to be hydrated, for example), if the User object is cloned and serialised, when it is unserialised might not be able to refer to the required information to be able to respond to the getUsername() method call, which in turn causes a fatal error on AbstractToken::hasUserChanged.
Example of error happening to us:
Fatal error:  Call to undefined method Doctrine\\ORM\\PersistentCollection::getPassword() in /var/www/src/MYPROJECT/UserBundle/Entity/User.php on line 80
Stack trace:
 1. {main}() /var/www/web/app_dev.php:0
 2. Symfony\\Component\\HttpKernel\\Kernel->handle() /var/www/web/app_dev.php:31
 3. Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel->handle() /var/www/app/bootstrap.php.cache:2246
 4. Symfony\\Component\\HttpKernel\\HttpKernel->handle() /var/www/app/bootstrap.php.cache:2966
 5. Symfony\\Component\\HttpKernel\\HttpKernel->handleRaw() /var/www/app/bootstrap.php.cache:2837
 6. Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher->dispatch() /var/www/app/bootstrap.php.cache:2852
 7. Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher->dispatch() /var/www/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php:139
 8. Symfony\\Component\\EventDispatcher\\EventDispatcher->dispatch() /var/www/app/cache/dev/classes.php:1758
 9. Symfony\\Component\\EventDispatcher\\EventDispatcher->doDispatch() /var/www/app/cache/dev/classes.php:1594
10. call_user_func() /var/www/app/cache/dev/classes.php:1661
11. Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher->Symfony\\Component\\HttpKernel\\Debug\\{closure}() /var/www/app/cache/dev/classes.php:1661
12. call_user_func() /var/www/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php:457
13. Symfony\\Component\\Security\\Http\\Firewall->onKernelRequest() /var/www/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php:457
14. Symfony\\Component\\Security\\Http\\Firewall\\ContextListener->handle() /var/www/app/cache/dev/classes.php:2351
15. Symfony\\Component\\Security\\Http\\Firewall\\ContextListener->refreshUser() /var/www/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ContextListener.php:90
16. Symfony\\Component\\Security\\Core\\Authentication\\Token\\AbstractToken->setUser() /var/www/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ContextListener.php:160
17. Symfony\\Component\\Security\\Core\\Authentication\\Token\\AbstractToken->hasUserChanged() /var/www/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php:106
18. MYPROJECT\\UserBundle\\Entity\\User->getPassword() /var/www/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php:257

