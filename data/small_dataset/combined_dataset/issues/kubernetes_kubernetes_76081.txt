StorageClassName of PVC not bounded  may need to be mutableField


What happened:
I create pvc www-test-0, with storageClassName test, but not bound.
Then ,  a statefuletSet created, as follow, with different storageClassName
Any pod can not be created for that pvc cannot creating.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: nginx
  name: web-test
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  serviceName: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
        ports:
        - containerPort: 80
          name: web
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /usr/share/nginx/html
          name: www
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
      storageClassName: **test1**
      volumeMode: Filesystem

2 reasons:



statefulSet controller would not update pvc when pvc already existed




validation would prevent the pvc to update.



What you expected to happen:
pvc that is not bound can be updated and then bound
How to reproduce it (as minimally and precisely as possible):

PVC named www-web-test-0  already, but unused and not bound. like this:

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: nginx
  name: www-web-test-0
  namespace: default
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: **test**
  volumeMode: Filesystem


A StatefulSet is created, like this. Then the pvc would not be updated, a pod can not be created

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: nginx
  name: web-test
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  serviceName: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
        ports:
        - containerPort: 80
          name: web
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /usr/share/nginx/html
          name: www
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
      storageClassName: **test1**
      volumeMode: Filesystem

Anything else we need to know?:
Environment:

Kubernetes version (use kubectl version):
Cloud provider or hardware configuration:
OS (e.g: cat /etc/os-release):
Kernel (e.g. uname -a):
Install tools:
Others:

