cajita.newTable() is confused by key inheritance


Original issue 1118 created by erights on 2009-08-31T04:33:54.000Z:
The commented lines below are the symptoms of the bug. Because we use these
tables within our TCB (more so since my last commit), I'm tagging this high
priority, security, private. But since all of our actual uses within our
TCB seem safe so far, I'm not classifying this as critical.
var x = {};
var y = cajita.beget(x);
var t1 = cajita.newTable(true);
t1.set(x, 33);
t1.get(x);
t1.get(y); // gives 33
t1.set(y, 44);
t1.get(x); // gives 44
t1.get(y);
var t2 = cajita.newTable();
t2.set(x, 55);
t2.get(x);
t2.get(y); // gives 55
t2.set(y, 66);
t2.get(x); // gives 66
t2.get(y);
The tables used within the TCB are not exposed outside the TCB. No table
within the TCB is ever purposely used on two keys, one of which might
inherit from the other. The remaining cases are where an attacker might
cause an object to inherits from an object used as a key and present the
derived object to be tested as a key -- in which case it will falsely pass.
Since Cajita code can only create new cajita-accessible objects that
inherit from existing cajita-accessible objects by record inheritance, as
in cajita.beget above, from inspection the vulnerabilities seem to be:

guards are stamped with the guard trademark so that they pass the guard
guard. Since guards are themselves records, this bug allows an attacker to
create a non-guard that inherits from a guard and have it pass the guard
guard. However, nothing yet actually uses the guard guard to test anything
useful.
TimeoutId and IntervalId objects are records stamped with their
respective trademarks. However, since the state obtained from a TimeoutId
or IntervalId after passing the trademark test is on an unmentionable
property name not used for anything else, it does not matter whether it is
instead obtained from a bogus derived object. In fact, because of this
naming, it looks like this trademark test isn't even needed.

