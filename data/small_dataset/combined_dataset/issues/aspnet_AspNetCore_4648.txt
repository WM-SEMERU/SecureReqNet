AddPolicyScheme changes the semantics of IAuthenticationSchemeProvider


I suspect my issue here will be too subtle to do anything about, but I need some guidance on this.
My sense is that the introduction of the new virtual/dynamic policy schemes has in an odd way retroactively changed the semantics of the IAuthenticationSchemeProvider and its various GetDefault... scheme APIs. In doing so, I'd almost call this a breaking change since the semantics are now different (and even deprecated).
As you all know, previously there was only one default authN scheme, sign in scheme, etc. and they all had a fallback to the default scheme. Now with the policy scheme handler, the semantics of what's default (via ForwardDefaultSelector) changes request by request. So now there is no longer the concept of default schemes, since they can change on every request. I'd say the semantics defined by IAuthenticationSchemeProvider is now pointless. Of course now the mechanics are relied upon to discover the virtual scheme, so it feels as if you've pained yourself into a corner and have to keep it.
I know this issue isn't terribly actionable, but it breaks code that previously made assumptions about only one scheme for authentication, sign in, etc.
This makes me think the design was incomplete. I also think there might be agreement on your side of that opinion. Perhaps the IAuthenticationSchemeProvider is what should have been made dynamic, not the schemes themselves. Though, there might be other use cases missed by that approach as well.
So what I'm looking for here is what's the plan going forward for this dynamic policy feature? Is what was added officially suggested and supported as a feature, or is it discouraged until a more complete design can be done? I'd like to know because as of now IdentityServer is not compatible with the virtual scheme feature. If I am to make changes to make it compatible, I'd like to know it's going to fit well into the future work as well. But if this virtual scheme feature is not something that is considered really complete (or may change again in vNext), then perhaps I can postpone trying to rework our code to accommodate it, and I can tell people that we don't officially support it because it's not really a complete feature in ASP.NET Core.
This predicament, as it seems to me, is yet again due to the lack of an isolated/multi-tenant pipeline in the DI system.
Thanks for listening :/
