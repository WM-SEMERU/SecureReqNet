cmd/go: [modules + integration] go mod requires, list the direct requirements for using a module


This report is part of a series focused at making Go modules work in integrator workflows. It’s being filled at the request of @mdempsky in golang-dev. It is informed both by the results of this golang-dev discussion, and by trying to make things work with Go module tooling as it exists today (experiment¹).
Please do not dismiss it or mark it as duplicate of another vaguely similar issue without making sure you’ve read and understood the golang-dev discussion. A lot of work went into identifying problems points precisely.
Needed feature
Go needs an official go mod requires command that processes packed Go module file and returns the list of dependencies needed to use this module in other code.
go mod requires could be implemented as a go mod graph mode, via specific option flags, or as a separate subcommand.
It is the pendant of go mod buildrequires (#31300) and used by the CI/CD system to populate the job runtime environment, after go mod buildrequires analysis.
Constrains

the output should be a machine-readable list of:

module path,
minimal version


the feature should also be exposed as a function in the official Go API, returning a go object (map, list, struct…)
the output should be either be pre-filtered, or be easily filterable, without further go tooling invocations, by:

GOOS (only return results for this GOOS),
GOOS+GOARCH (only return results for this GOOS and GOARCH), or
complete build context (GOOS+specific build flag set)


the output should be either be pre-filtered, or be easily filterable, without further go tooling invocations, by direct and indirect requirements
the output should be either be pre-filtered, or be easily filterable, without further go tooling invocations, by:

code reuse requirements (modules needed to use the code in other projects)
compiler test requirements (modules needed to run tests, that only require the compiler)
integration test requirements (modules needed to run tests, that require more than just the compiler to run, and may not be satisfied by the average CI/CD system):

internet access,
root access
some specific software instance
some credentials, etc




the command should work in secure no-download no-cache mode. In that mode it would probably restricts its output to direct dependencies.

Motivation


this is pretty much what go mod graph already does, except that this issue asks for a finer-grained dependency view. So it would be a natural go mod graph extension, and only requires a separate subcommand if there is a wish to keep go mod graph output holistic and unfiltered.


the finer grained view is needed because populating a CI/CD build environment with more code, than the strict minimum the run will need, gets prohibitively expensive in run time, for busy build farms with a huge list of jobs to run. Therefore the build requirement list needs to be as cut down as possible, allowing to remove the requirements unneeded on a particular GOOS/GOARCH. GOOS/GOARCH is the finest filtering mode, that allows module reuse. GOOS/GOARCH is a constrain shared by all the other code that may wish to reuse the module. That is not the case of other project-specific build tags.


in integration mode, any go module that already went through the CI/CD integration pipeline, and has been accepted in the project baseline, already passed all its unit tests, therefore injecting the dependencies of those unit tests in jobs, that reuse this module, is unnecessary and undesirable.


missing modules will typically be populated from the organisation baseline. Because this baseline can be shared between organisation projects, it won't be mirrored in each project VCS in a vendor directory.


needed modules, identified by the go mod requires call, will typically be populated from the organisation baseline.


adding new modules to the organisation baseline is a lot of work². It requires

assigning a curating team,
sifting between forks to identify the actual current project upstream,
sifting between VCS mirrors to find the root VCS,
legal analysis,
test result analysis,
writing the corresponding recipe for the CI/CD system
etc.



therefore, there was violent disbelief and rejection among consulted integrators³, of any Go module setup, that forced them to process new modules just because the corresponding imports exists in module parts they have no use for:

dependencies of GOOS/GOARCH-specific code, when this GOOS/GOARCH is not part of the organisation targets
dependencies of upstream integration tests, that have no chance to ever run in our CI/CD setup, because they use elements not available in it (typically, direct internet calls or root access)
dependencies of example code, that will never be used in production, and typically does not compile because its upstream is not keeping it up to date
their GOPATH/vendor experience of third party code has made them extremely sensible to this kind of spurious import, and the amount of work it represents.



Detailed Context
The current Go module design and implementation targets small Go projects. Those projects consume raw unchanged third party projects, and rely blindly on the QA done by those other projects. Their only needs are to download those projects, check they’ve not been tampered with (via notaries),  regularly check for updates.
Small project code supply chain:
third party code
        ↓
direct or proxied
download,
without changes
(upstream integrity checks required)
        ↓
use in project without checks
(blind third party trust)

Big integration projects, however, can not afford this direct pipeline.
Big integration projects can be:

Linux distributions
huge software projects like Kubernetes (as noted by @thockin)

There is too much third party code in play. Every member of the team can not be expected to master all the third party parts. All the third party projects may not be up to the project QA standards. Expecting all of them to deal timely with issues all the time (and thus being able to use them unchanged) is unrealistic. Continuous internet downloads make CI/CD prohibitively expensive, unreliable and unreproducible.
Therefore any big integration project will have to give up on direct internet third party code use. It will work from a baseline of third party code. This baseline will receive small last-mile fixes to deal with the problems encountered while integrating a large mass of third-party code, and mask the lag of getting all those fixes accepted by the original third party projects. This baseline will be broken up in individual components to allow different teams to take ownership the curation of different parts of the third party codebase. And, because all this is a huge amount of work, the organisation managing the project will want to share it with its other projects.
Big project code supply chain:
third party code
        ↓
direct or proxied
download
without changes
(upstream integrity checks required)
        ↓
curating 
– checking,
– fixing, 
– removing unneeded/broken/dead parts
(upstream integrity checks voided)
        ↓
curated baseline
        ↓  ↓  ↓  ↓  ↓  ↓  ↓  ↓ ↓
use in project A … use in project N
(no other third party code or internet download checks permitted)

The aim of this report series is to make Go module tooling integration-friendly, helping big integration projects to constitute and manage their baselines, and consume the result in all their sub-projects.
For historical reasons baselines have been created in GOPATH/vendor mode so far. But, there is no reason for this mode to persist. All the code management wins produced by modules in the direct download case, are also desirable in the integration/baseline case.
Therefore, there is a tooling need to convert the existing GOPATH/vendor baselines of third party code into  baselines of Go modules.
¹ The experimental code is probably horrible. That's not the point. Most of its functions are generic and should have been provided by generic Go tooling in the first place.
