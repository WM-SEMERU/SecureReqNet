.constructor and .prototype are subtle


Original issue 542 created by google@web.dwdw.me on 2008-06-12T16:37:54.000Z:
Caja should document the invariants, assumptions, obligations, and theory
of operation surrounding .constructor and .prototype properties.  For instance:


You should document what are the obligations of writers of Javascript
libraries.  Apparently, one of the intended invariants is that Caja code
should never be able to get its hands on a prototypical object.  This
imposes obligations on JS library writers: they must never leak access to a
prototypical object.  (It would also be nice to have documentation of any
other requirements on JS library writers.  For instance, it's apparently
also important that JS library writers must never leak access to a host
object to Caja.)


It would help to document the invariants that Caja maintains about
.constructor and .prototype.  For instance, I believe it's something like:
Caja trusts the value of .constructor on prototypical objects but never
otherwise; Caja code must never be able to set .constructor on prototypical
objects (because it can't get its hands on a prototypical object); Caja
never trusts or cares about the value of .prototype except on objects of
type Function; you ensure that Caja code can never set the .prototype
property on something of type Function (by ensuring that .prototype is not
whitelisted on Function).


It would be a good idea, for maintainability and code review purposes,
to do a better job of documenting the tricky things you are doing in
caja.js where you do them.  I'm thinking especially of the implementation
of directConstructor(), but also why canSetPub()/setPub() lets anything go
on JSON containers.


