Stabilize StreamAsyncCanBeCanceledThroughGetAsyncEnumerator test


Fixes: aspnet/AspNetCore-Internal#2196
We were seeing some flakiness on some of the PR builds for this test.
I updated this test to use a strategy that we have in a similar test for our channel streaming API



AspNetCore/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs


        Lines 728 to 742
      in
      8bfbc4a






 var cts = new CancellationTokenSource(); 



 



 var channel = await connection.StreamAsChannelAsync<int>("Stream", 1000, cts.Token).OrTimeout(); 



 



 // Wait for the server to start streaming items 



 await channel.WaitToReadAsync().AsTask().OrTimeout(); 



 



 cts.Cancel(); 



 



 var results = await channel.ReadAndCollectAllAsync(suppressExceptions: true).OrTimeout(); 



 



 Assert.True(results.Count > 0 && results.Count < 1000); 



 



 // We should have been canceled. 



 await Assert.ThrowsAsync<TaskCanceledException>(() => channel.Completion); 





Instead of only expected 1 item to have been written to the stream just enforce that we at least gotten one item and that less than the total amount, in this case 1000 items, were written because of the token getting triggered.
