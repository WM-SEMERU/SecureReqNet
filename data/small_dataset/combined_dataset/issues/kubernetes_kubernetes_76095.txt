TestPreempt FAIL


What happened:
--- FAIL: TestPreempt (0.00s)
    --- FAIL: TestPreempt/basic_preemption_logic (0.00s)
        generic_scheduler_test.go:1483: ===== Running test TestPreempt/basic_preemption_logic
        generic_scheduler_test.go:1527: expected node: machine1, got: machine2
        generic_scheduler_test.go:1533: expected 2 pods, got 0.
    --- FAIL: TestPreempt/One_node_doesn't_need_any_preemption (0.00s)
        generic_scheduler_test.go:1483: ===== Running test TestPreempt/One_node_doesn't_need_any_preemption
        generic_scheduler_test.go:1527: expected node: machine3, got: machine2
    --- FAIL: TestPreempt/Scheduler_extenders_allow_only_machine1,_otherwise_machine3_would_have_been_chosen (0.00s)
        generic_scheduler_test.go:1483: ===== Running test TestPreempt/Scheduler_extenders_allow_only_machine1,_otherwise_machine3_would_have_been_chosen
        generic_scheduler_test.go:1533: expected 2 pods, got 0.
    --- FAIL: TestPreempt/One_scheduler_extender_allows_only_machine1,_the_other_returns_error_but_ignorable._Only_machine1_would_be_chosen (0.00s)
        generic_scheduler_test.go:1483: ===== Running test TestPreempt/One_scheduler_extender_allows_only_machine1,_the_other_returns_error_but_ignorable._Only_machine1_would_be_chosen
        generic_scheduler_test.go:1533: expected 2 pods, got 0.
FAIL
FAIL	k8s.io/kubernetes/pkg/scheduler/core	0.022s

How to reproduce it (as minimally and precisely as possible):
make test WHAT=./pkg/scheduler/core KUBE_TEST_ARGS='-run ^TestPreempt$'

Anything else we need to know?:
We add FitPredicate like this and set matches as the key when TestPreempt inits the NewGenericScheduler.
map[string]algorithmpredicates.FitPredicate{"matches":algorithmpredicates.PodFitsResources}



kubernetes/pkg/scheduler/core/generic_scheduler_test.go


        Lines 1505 to 1515
      in
      25ffbe6






 scheduler := NewGenericScheduler( 



 	cache, 



 	internalqueue.NewSchedulingQueue(nil), 



 map[string]algorithmpredicates.FitPredicate{"matches": algorithmpredicates.PodFitsResources}, 



 	algorithmpredicates.EmptyPredicateMetadataProducer, 



 	[]priorities.PriorityConfig{{Function: numericPriority, Weight: 1}}, 



 	priorities.EmptyPriorityMetadataProducer, 



 	emptyPluginSet, 



 	extenders, 



 nil, 



 	schedulertesting.FakePersistentVolumeClaimLister{}, 





But when we use FitPredicate, it will iterate through the predicates.Ordering() and check the key in predicateFuncs. But the key of PodFitsResources is PodFitsResources. So the func PodFitsResources will not be used in TestPreempt and logic errors are introduced.
// PodFitsResourcesPred defines the name of predicate PodFitsResources.
	PodFitsResourcesPred = "PodFitsResources"




kubernetes/pkg/scheduler/core/generic_scheduler.go


        Lines 608 to 622
      in
      25ffbe6






 for _, predicateKey := range predicates.Ordering() { 



 var ( 



 		fit     bool 



 		reasons []predicates.PredicateFailureReason 



 		err     error 



 	) 



 //TODO (yastij) : compute average predicate restrictiveness to export it as Prometheus metric 



 if predicate, exist := predicateFuncs[predicateKey]; exist { 



 		fit, reasons, err = predicate(pod, metaToUse, nodeInfoToUse) 



 if err != nil { 



 return false, []predicates.PredicateFailureReason{}, err 



 		} 



 



 if !fit { 



 // eCache is available and valid, and predicates result is unfit, record the fail reasons 





/sig scheduling
/kind bug
/assign
/cc @bsalamat
