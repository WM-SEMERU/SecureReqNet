Disallow interpolation on ng-app element to allow safe mixing of client and server-side templating



Do you want to request a feature or report a bug?

Feature

What is the current behavior?

Interpolation {{ ... }} is automatically handled in any child of the main ng-app element.

What is the expected behavior?

A new mode or flag should be added which prevents {{ ... }} from being interpolated in the main document template (i.e. the ng-app element). {{ ... }} will still be supported in templates.

What is the motivation / use case for changing the behavior?

Mixing client-side and server-side templating has long been discouraged in angular, however this is not always easy advice to follow. When adding angular to an existing (say) rails app, it's very inconvenient to suddenly need to replace all server-side templating with client-side templating, even when there's no actual need for the logic to be client-side. And if you don't have a strong separation between server & client side templates (e.g. maybe you reuse a partial in multiple pages), it's all too easy for server-side templating to sneak into the client-side templates and cause security issues. Without dropping server-side rendering throughout your entire app, it's very difficult to be sure that you're using angular safely.
While I agree that mixing should be discouraged, angular is pretty close to allowing some safe mixing. All of the directive-related syntax is a superset of XML, so typical server-side content escaping prevents directive-injection. It's only interpolation-injection which the server cannot protect against, because it doesn't know which part of the page needs to be angular-aware.
If you could disallow {{...}} from being interpreted in the initial document template (i.e the ng-app element) but still allow it in all other templates, it's much easier for applications to ensure that no server-side templating can sneak in (e.g. serving plain .html templates). This would not cause any loss of power - any instances of {{...}} directly in the document body will work correctly once extracted into a template or directive.

Which version of Angular, and which browser and OS does this issue affect? Did this work in previous
versions of Angular? Please also test with the latest stable and snapshot versions.

N/A - feature request
