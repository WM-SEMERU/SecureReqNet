$injector.loadNewModules() does not update providers/values that are already defined.


I'm submitting a ...

 bug report
 feature request
 other 

Current behavior:
$injector.loadNewModules() does not apply any new angular.module.value or $provide.decorator  calls when loaded.  What this means is that it is not possible for a lazyload-ed module to update an injector value or decorate something that has already been provided in the upstream module.
If a value/service is exclusively defined in the "child lazy loaded module", then it can be over-ridden via angular.module.value and $provide.decorator -- so the behavior seems to be consistent with values/things already provided.
Expected / new behavior:
I would have expected lazy-loaded modules via $injector.loadNewModules() to run any appropriate $provide.decorator and angular.module.value blocks and update the injector values globally as needed for all future invocations.
I'm trying to lazy load AngularJS Material into my system, and it makes use of several $provide.decorator statements here to hack things onto $q and $$RAF.
AngularJs Material also uses several $provide.decorator statements in really interesting/scary ways (where it doesn't necessarily need to do so...).
Minimal reproduction of the problem with instructions:
I put together a stackblitz here that attempts to illustrate this problem with a simple service function call:
https://stackblitz.com/edit/angularjs-loadnewmodules-decorator-bug?file=home/index.js

"MyService" is an eagerly loaded service in the "root" module
"LateService" is a late loaded service in the "late" module
I would expect after an initial "lazyload()" and then "click()", that the three values in my blitz would all be "789"

AngularJS version: 1.7.7
Browser: ALL
Anything else:
