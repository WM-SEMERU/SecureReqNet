Incomplete session lifetime management (key rotation)


WireGuard protocol requirements for per-peer session lifetime based on the whitepaper:

Sessions must no longer be used REJECT-AFTER-TIME (180 seconds). Data must not be sent when a session is expired and received data must be ignored.
If an initiator sends data and session age >= REKEY-AFTER-TIME (120 seconds), it should attempt to start a new handshake.
If a responder receives data and the session age is >= REJECT-AFTER-TIME - KEEPALIVE-TIMEOUT - REKEY-TIMEOUT (180 - 10 - 5 seconds), it should try to initiate a new handshake once for this event.
After REJECT-AFTER-TIME * 3, all existing sessions must be destroyed.
During key rotation, one must be able to decrypt data using the current and previous session (subject to the above REJECT-AFTER-TIME requirement), but previous sessions must be destroyed.

boringtun implements session retrieval and management in src/noise/timers.rs and src/noise/mod.rs.
Sessions are cleared only when:

Tunn::set_static_private: called when a new private key is set.
Tunn::clear_all: called when either:

The most recent established session is older than REJECT-AFTER-TIME * 3 (established defined as receipt of an initiator/response message, not the 1.5-RTT data message for the responder!)
A new handshake was started by this device more than REKEY-ATTEMPT-TIME ago, but was not answered (handshake timeout).



Sessions are created on receipt of handshake messages in network_to_tunnel:

On receipt of a valid initiation message. Note that this session cannot be used yet since the current index has not yet been updated.
On receipt of a valid response handshake message that matches an existing in-progress handshake. Note that this session cannot be used yet since the current index has not yet been updated.

Sessions are used in:

time_since_last_handshake - uses the current session.
tunnel_to_network - uses the current session. Called when a locally-originated data packet is about to be sent.
receive_data_packet - uses the session based on the receiver index which is chosen by the remote peer.

The "current" session is updated in:

network_to_tunnel - when an initiator receives a handshake response.
receive_data_packet - when a data packet for an existing session is received and is successfully decrypted with a valid counter that is not reused.

Problems:

The "current session" can be changed by the remote peer (or attacker) who sends a valid data packet. The "current session" should only be replaced when the a session is newer. Otherwise, consider this attack against the boringtun as initiator (a similar issue applies in the responder role):

A honest boringtun initiator establishes a session with a responder and sends data. An attacker intercepts and withholds some data packets from the responder.
The initiator (or responder) starts a new session due to key rotation and switches over to the new session.
The attacker sends one of the data packets to the initiator, possibly after REJECT-AFTER-TIME has passed for the first session.
The initiator switches the session secrets back to the old session, data sent by the initiator will not be protected with newer session secrets.
This basically defeats key rotation and violates Requirement 1.


Requirement 2 seems not fully implemented. If an initiator has sent data at some point, and after REKEY_AFTER_TIME, it should not automatically send an initiation message. Instead it should only trigger a new handshake right after sending a data message (including Keep-Alive). Right now it unconditionally sends an initiation message after REKEY-AFTER-TIME while it should have remained silent.
Requirement 3 seems not fully implemented. REJECT_AFTER_TIME - KEEPALIVE_TIMEOUT - REKEY_TIMEOUT must be checked by the responder, but boringtun only checks it for the initiator.
Requirement 4 seems satisfied but with one potential issue. As sessions are considered "established" right after receiving the Initiation message, the following attack is possible against a boringtun responder:

Initiator starts handshake by sending an Initiation message. An attacker prevents these messages from arriving, so the initiator repeatedly sends new initiation messages.
The attacker forwards the very first initiation message and thus establishes a session.
Assume that the initiator no longer has data to send, so after REJECT-AFTER-TIME * 3, all sessions must be cleared.
Just before it expires though, the attacker forwards the second initiation message. As this is not a replay, the boringtun responder assumes that a new session is established.
This process can be repeated by an attacker using the remaining initiation messages.
The result is that the session lifetimes can be prolonged.


Requirement 5 is not satisfied because previous sessions are not cleared.
(minor observation) Tunn:tick_handshake_started appears to be dead code, Tunn::format_handshake_initiation calls self.timer_tick(TimerName::TimeLastHandshakeStarted) directly.

Summary: Key rotation is not properly implemented, keys should have been cleared but are actual maintained for potentially a very long time. This might defeat forward secrecy when the boringtun client/server is raided since all keys are still in memory.
Note: this is based on a manual code review, I did not actually try to test the actual implementation.
Analysis applies to current master (commit e765e12).
