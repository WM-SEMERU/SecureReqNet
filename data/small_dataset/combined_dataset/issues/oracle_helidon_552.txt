Pre-matching authorization does not work


Pre-matching authorization currently seems to leave all the resources open. No authorization is being processed (tested with ABAC), because the endpoint config contains no annotations in this case and so the validations are skipped.
Environment Details

Helidon Version: 1.0.2
Helidon MP
JDK version: 11.0.2
OS: Linux
Docker version (if applicable):


Problem Description + Sample code
Let's define a sample resource
@ApplicationScoped
@Path("/test")
public class RootResource {

@Inject private SubResource sub;

@GET 
@Path("/")
@RolesAllowed("ROLE_A") 
@Authorized
public String test() {
   return "TEST PASSED";
}

@Path("/sub")
// This is ignored with prematching-authorization: false
// I would expect that "prematching" means that even this annotation is going to be validated.
@RolesAllowed("ROLE_A", "ROLE_B")
@Authorized
public SubResource sub() {
    // Here goes some custom logic that relies on the authorization policies being valid
    return sub;
}
}
@ApplicationScoped
public class SubResource {

@GET 
@Path("/")
@RolesAllowed("ROLE_A") 
@Authorized
public String test() {
   return "SUB-TEST PASSED";
}
}
Without pre-matching authorization, anybody can request sub-resource from sub(), but then the particular resource in SubResource that was matched will going to be validated.
With pre-matching authorization, any of these resources can be called, no matter what the roles of the user are.
I would expect that prematching authorization will be validating all annotations above including the annotations along the path.
