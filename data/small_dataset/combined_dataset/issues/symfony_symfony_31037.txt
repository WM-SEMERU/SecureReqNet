[RFC][Routing] Specify route guard in routing config


Description
I want to get some feedback on an idea, will create the PR if the idea is acceptable.
Currently, there are various ways of preventing access to a specific route/controller, each with their own benefits and drawbacks, but I'm missing a simple way to do it inline with the route configuration. So I want to propose to add a new guard option to the routing config, where you can specify access rules for the route.
Example
my_profile:
    path: /profile
    controller: App\Action\Profile
    guard: ROLE_USER
Specifying many roles:
manage_users:
    path: /users
    controller: App\Action\Users
    guard:
        - ROLE_USER
        - ROLE_ADMIN
Maybe instead of adding a new option, the condition option can be extended to include the is_granted function
contact:
    path:       /contact
    controller: 'App\Action\Contact'
    condition:  "context.getMethod() in ['GET', 'HEAD'] and is_granted('ROLE_ADMIN')"
The benefit of this approach is to have all the config in a single place, making it easier to spot access restrictions in config files. Although there are various other ways to restrict access, there are some drawbacks with some of the approaches:

The most common approach seems to be to use the denyAccessUnlessGranted method from the ControllerTrait. The main drawback here is that you need to extend the Symfony\Bundle\FrameworkBundle\Controller\AbstractController class (or use the ControllerTrait directly, although I'm not sure if that is recommended). In many cases, I'm using a single invokable class, injecting the services as controller arguments. This means I need to inject an additional security checker service in the controller, which is not ideal if there are a lot of controllers which needs access control.
A second option is to use the @Security annotation, but for that you need to have the sensio/framework-extra-bundle package installed, and I try to not use annotations and have all the config in yaml/xml files
The last option is to use the access_control setting in the security config. The major benefit here is the regular expression that can be used to restrict access to multiple paths, but the drawback is that it relies on the url. So if you change the path in a route config, then it's easy to miss to update the security config. This approach also keeps the security config away from the route config, causing some wtf moments (E.G I get an access denied error, but I don't see where this url is blocked in the controller or routing config).

I'm not sure if something similar has been discussed before, or if there is a better alternative, so just point me in the right direction if I'm missing something.
