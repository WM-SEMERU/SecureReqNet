npm ci creates wrong symlink


I'm opening this issue because:

 npm is crashing.
 npm is producing an incorrect install.
 npm is doing something I don't understand.
 npm is producing incorrect or undesirable behavior.
 Other (see below for feature requests):

What's going wrong?
How can the CLI team reproduce the problem?
p.tar.gz
$ tar xzvf p.tar.gz
$ for i in a b c; do (cd p/$i; npm ci); done
...
npm ERR! enoent ENOENT: no such file or directory, open ' ... /p/c/node_modules/b/node_modules/a/package.json'
...
$ ls -l p/c/node_modules/b/node_modules/a
lrwxrwxrwx 1 nakagawa nakagawa 13 Jul 13 01:12 p/c/node_modules/b/node_modules/a -> ../../../../a
npm i works fine.
$ rm -rf p/?/node_modules
$ for i in a b c; do (cd p/$i; npm i); done
$ ls -l p/c/node_modules/b/node_modules/a
lrwxrwxrwx 1 nakagawa nakagawa 7 Jul 13 01:09 p/c/node_modules/b/node_modules/a -> ../../a
supporting information:

npm -v prints:6.1.0
node -v prints:v10.6.0
npm config get registry prints:https://registry.npmjs.org/
Windows, OS X/macOS, or Linux?:Linux
Network issues:

Geographic location where npm was run:
 I use a proxy to connect to the npm registry.
 I use a proxy to connect to the web.
 I use a proxy when downloading Git repos.
 I access the npm registry via a VPN
 I don't use a proxy, but have limited or unreliable internet access.


Container:

 I develop using Vagrant on Windows.
 I develop using Vagrant on OS X or Linux.
 I develop / deploy using Docker.
 I deploy to a PaaS (Triton, Heroku).



