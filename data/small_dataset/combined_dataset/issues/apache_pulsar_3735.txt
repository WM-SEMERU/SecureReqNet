Implementing authentication for Pulsar Functions


Motivation
Currently authentication for functions can only work with static credentials which makes every function have the same credentials as any other function which is not practical.  Since functions should have the same credentials as the users that submit them.
This is an initial implementation that solves the issue
Currently, users will not be able to specify which function auth provider to use, but I can add that in a subsequent PR once everyone is onboard with this
Master issue: #3763
The workflow of the current API is as such:

User submits function worker with auth data
Worker caches information based on auth data ( implementation specific) that gets stored in the function meta topic which gets distributed to every worker
A worker that is assigned to run an instance of the function gets the auth info from the function metadata topic and setups/configures the function instance to support auth (Details are implementation specific)

Below is a diagram that demonstrates the end-to-end process of function authentication for a possible implementation on function authentication in Kubernetes using tokens issued by Hashicorp's Vault:

The KubernetesFunctionAuthenticationProvider implementation is based on the above diagram
