[Security] Different switch user provider from A -> B that B -> A


For example, I have a FOSUser called Player that has many Character. You could log as a player without problem, and for each Character you could switch to behave like if your were your character.
security:
    providers:
        fos_userbundle:
            id: fos_user.user_provider.username_email
        game_character:
            id: game.security.character_provider

    firewalls:
        dev:
            pattern: ^/(_(error|profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_token_generator: security.csrf.token_manager

            logout:       true
            anonymous:    true

            switch_user:
                provider:  game_character
                parameter: _switch
                role:      ROLE_ALLOWED_TO_SWITCH_CHARACTER

    encoders:
        FOS\UserBundle\Model\UserInterface:
            algorithm: bcrypt
            cost: 12
        Symfony\Component\Security\Core\User\User:
            algorithm: bcrypt
            cost: 12

    role_hierarchy:
        ROLE_PJ:          []
        ROLE_PLAYER:      [ROLE_ALLOWED_TO_SWITCH_CHARACTER]
        ROLE_USER:        [ROLE_PLAYER]
class CharacterProvider implements UserProviderInterface
{
    protected $entityManager;
    protected $tokenStorage;

    public function __construct(ObjectManager $entityManager, TokenStorageInterface $tokenStorage)
    {
        $this->entityManager = $entityManager;
        $this->tokenStorage = $tokenStorage;
    }

    public function loadUserByUsername($username)
    {
        $player = $this->tokenStorage->getToken()->getUser();

        if (!$player instanceof Player) {
            throw new UnsupportedUserException(
                'Only a player can switch to a character.'
            );
        }

        $character = $this->entityManager
                          ->getRepository('Character')
                          ->findOneByPlayerAndUsername($player, $username);

        if (null === $character) {
            throw new UsernameNotFoundException(
                sprintf('Character "%s" for player "%s" does not exist.', $username, $player->getUsername())
            );
        }

        return $character;
    }

    public function refreshUser(UserInterface $user)
    {
        if (!$this->supportsClass(get_class($user))) {
            throw new UnsupportedUserException(
                sprintf('Instances of "%s" are not supported.', get_class($user))
            );
        }

        return $user;
    }

    public function supportsClass($class)
    {
        return $class === 'Character';
    }
}
Everything works great when switching Player -> Character (ContextListener loads the correct entity depending on user impersonated), but the problem is that when trying to exit (with _switch=_exit).
What happen is that SwitchUserListener tries to refreshUser with the given provider (in this case my CharacterProvider) and gives the original user or the Player, which cannot be refreshed by this provider.
One solution could be to make SwitchUserListener accepts $originalProvider and $impersonatedProvider and will call depending which user is passing, first to switch and second to exit. This could also be called $switchProvider and $exitProvider.
