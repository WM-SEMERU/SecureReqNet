## Current behavior

After you type a comment in the text area on an open issue, you are presented with two buttons under the text area: *Add Comment* and *Close Issue*.  I had typed a detailed comment describing how the issue was resolved and then clicked *Close Issue*, which I assumed would post the comment and close the issue.

But in fact to my surprise it discarded the comment and the text I entered could not be retrieved even with the browser back button.

## Why is this bad?

(1) It is right under the text area and next to the Add Comment button, so there is an implication that the Close Issue button also somehow applies to the comment text entered.  This is misleading since the Close Issue button has nothing to do with the comment text area.

(2) Clicking the Close Issue button discards the user's entered text without warning and without ability to retrieve it.

## What should be done

There are two alternatives, depending on whether we want to

(A) post a comment while concurrently closing the issue, or if
(B) Add Comment and Close Issue should be distinct actions.

JIRA, at least in the workflow where I've used it, takes approach (A): clicking the Resolve Issue button presents the user with a dialog allowing the user to enter a comment and some other information such as the version it was resolved in, and then when the Submit button on that dialog is clicked, the issue is both resolved and the comment and other information from the dialog are applied to the issue.

It would be fine to implement option (B) though.  In that case, two things need to be implemented:

(1) the Close Issue button should be moved to somewhere other than immediately below the comment text area field, and 
(2) And if the user has entered text in the comment text area, prompt them before discarding it.  Or, don't discard it but keep it in the text area, unsubmitted.
